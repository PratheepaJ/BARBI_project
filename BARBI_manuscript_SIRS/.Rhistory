p <- plot_heatmap(ps.top, sample.label = "SampleCode", taxa.label="Species", taxa.order = top, sample.order = sam.order, high = high, low = low) +
geom_tile() +
guides(fill = guide_legend(title="asinh abundance")) +
facet_wrap(~block, scales = "free_x") + theme(strip.background = element_blank(), axis.text = element_text(size = 8))
p
new_gradient <- scale_fill_gradient(low = low, high = high, trans = trans, na.value = na.value, breaks = c(0.001, 0.01, 0.1, 1), name="asinh\nabundance")
low = "#000033"; high = "#66CCFF";na.value = "black"
new_gradient <- scale_fill_gradient(low = low, high = high, na.value = na.value, breaks = c(0.001, 0.01, 0.1, 1), name="asinh\nabundance")
p <- plot_heatmap(ps.top, sample.label = "SampleCode", taxa.label="Species", taxa.order = top, sample.order = sam.order, high = high, low = low) +
geom_tile() +
guides(fill = guide_legend(title="asinh abundance")) +
facet_wrap(~block, scales = "free_x") + theme(strip.background = element_blank(), axis.text = element_text(size = 8))
p
p <- p+ theme(axis.text.x=element_blank(), axis.ticks.x=element_blank())+theme(plot.margin=unit(c(0,0.5,0.5,0.5),"lines"))
p
hcbdf <- data.frame(sample_data(psm))[sam.order,]
hcbdf <- data.frame(sample_data(ps))[sam.order,]
View(hcbdf)
levels(sample_data(ps)$Sample_Type)
hcbdf$index <- seq(1,nsamples(ps))
# adding bar for plasma and control
make_hcb <- function(data, var, name = NULL, fillScale = NULL, ...) {
hcb <- ggplot(data=data, aes_string(x="index", y=1, fill=var)) +
geom_raster() +
scale_y_continuous(expand=c(0,0), breaks=1, labels=name) +
scale_x_continuous(expand=c(0,0)) +
xlab(NULL) + ylab(NULL) +
theme(axis.title=element_blank(), axis.ticks=element_blank()) +
theme(axis.text.x=element_blank()) +
theme(axis.text.y=element_text(size=8, face="bold")) +
theme(plot.margin=unit(c(0,0,0,0),"lines"),
axis.ticks.margin = unit(0,"null"), ...) +
guides(fill=F)
if(!is.null(fillScale)) hcb <- hcb + fillScale
return(hcb)
}
CSTColors <- brewer.pal(6,"Paired")[c(1,3,2,5,4,6)] # Length 6 for consistency with pre-revision CST+ coloration
CSTFillScale <- c("blue","red")
hcbdf <- data.frame(sample_data(ps))[sam.order,]
hcbdf$index <- seq(1,nsamples(ps))
hcb <- make_hcb(hcbdf, "Sample_Type", name="Sample Type", fillScale = CSTFillScale)
library(RColorBrewer)
CSTColors <- brewer.pal(6,"Paired")[c(1,3,2,5,4,6)] # Length 6 for consistency with pre-revision CST+ coloration
CSTColors
names(CSTColors) <- CSTs
names(CSTColors) <- c("Plasma","Control")
names(CSTColors)
CSTColorScale <- scale_colour_manual(name = "Sample Type", values = CSTColors[1:2])
CSTColorScale
CSTFillScale <- scale_fill_manual(name = "Sample Type", values = CSTColors[1:2])
CSTFillScale
hcbdf <- data.frame(sample_data(ps))[sam.order,]
hcbdf$index <- seq(1,nsamples(ps))
hcb <- make_hcb(hcbdf, "Sample_Type", name="Sample Type", fillScale = CSTFillScale)
hcb
hcb
hcb <- hcb + annotate("text", x=tapply(hcbdf$index, hcbdf[,"Sample_Type",drop=T], mean), y=1, label=levels(hcbdf[,"CST",drop=T]), size=2)
View(hcbdf)
hcb <- hcb + annotate("text", x=tapply(hcbdf$index, hcbdf[,"Sample_Type",drop=T], mean), y=1, label=levels(hcbdf[,"Sample_Type",drop=T]), size=2)
hcb
ggplotGrob
mush <- function(hmap, hcbs) {
cbgs <- lapply(hcbs, ggplotGrob)
hmg <- ggplotGrob(hmap)
# Make sure both plots have the same width in our final output
cbWidths <- lapply(cbgs, function(x) x$widths[1:4])
maxWidth <- do.call(unit.pmax, cbWidths)
maxWidth <- unit.pmax(hmg$widths[1:4], maxWidth)
# For visibility, set to the maximum width
hmg$widths[1:4] <- as.list(maxWidth)
for(i in seq_along(cbgs)) {
cbgs[[i]]$widths[1:5] <- as.list(unit.c(maxWidth, hmg$widths[5]+hmg$widths[6]))
}
heights <- unit.c(unit(rep(1,length(cbgs)), "lines"), unit(1, "null"))
rval <- do.call(arrangeGrob, args = c(cbgs, list(hmg), ncol=1, heights=list(heights)))
return(rval)
}
p <- mush(p, list(hcb))
p
p
print(p)
ps.top <- ps
# do arcsinh transformation
ot <- otu_table(ps.top) %>% data.frame %>% as.matrix
geo_mean <- function(x) {
if(all(x == 0)){
val <- 0
}else{
val <- exp(sum(log(x[x > 0]))/length(x))
}
return(val)
}
geom_mean_row <- apply(ot, 1, FUN = geo_mean)
ps.top <- ps
# do arcsinh transformation
ot <- otu_table(ps.top) %>% data.frame %>% as.matrix
geo_mean <- function(x) {
if(all(x == 0)){
val <- 0
}else{
val <- exp(sum(log(x[x > 0]))/length(x))
}
return(val)
}
geom_mean_row <- apply(ot, 1, FUN = geo_mean)
sj <- estimateSizeFactorsForMatrix(ot, median, geoMeans = geom_mean_row)
ot.trans <- t(asinh(t(ot)/sj))
ps.top <- phyloseq(otu_table(ot.trans, taxa_are_rows = TRUE), sample_data(ps.top), tax_table(ps.top))
# choose top 30 species in plasma samples for heatmap
top <- names(sort(taxa_sums(subset_samples(ps.top, Sample_Type == "Plasma")), decreasing=TRUE))[1:30]
ps.top <- prune_taxa(top, ps.top)
otu_table(ps.top) <- otu_table(ps.top) +1
# order sample by plasma and control
df <- data.frame(sample_data(ps)$SampleCode, sample_data(ps)$Sample_Type)
sam.order <- as.character(df$sample_data.ps..SampleCode)
sample_data(ps.top)$block <- factor(sample_data(ps.top)$block)
levels(sample_data(ps.top)$block) <- c("Set 1", "Set 2", "Set P")
p <- plot_heatmap(ps.top, sample.label = "SampleCode", taxa.label="Species", taxa.order = top, sample.order = sam.order, high = high, low = low) +
geom_tile() +
guides(fill = guide_legend(title="asinh abundance")) +
facet_wrap(~block, scales = "free_x") + theme(strip.background = element_blank(), axis.text = element_text(size = 8))
p
ggsave("./Figures/heatmap_SIRS_top.eps", plot = p, width = 10, height = 6)
ps.top <- ps
# do arcsinh transformation
ot <- otu_table(ps.top) %>% data.frame %>% as.matrix
geo_mean <- function(x) {
if(all(x == 0)){
val <- 0
}else{
val <- exp(sum(log(x[x > 0]))/length(x))
}
return(val)
}
geom_mean_row <- apply(ot, 1, FUN = geo_mean)
sj <- estimateSizeFactorsForMatrix(ot, median, geoMeans = geom_mean_row)
ot.trans <- t(asinh(t(ot)/sj))
ps.top <- phyloseq(otu_table(ot.trans, taxa_are_rows = TRUE), sample_data(ps.top), tax_table(ps.top))
# choose top 30 species in plasma samples for heatmap
top <- names(sort(taxa_sums(subset_samples(ps.top, Sample_Type == "Plasma")), decreasing=TRUE))[1:30]
ps.top <- prune_taxa(top, ps.top)
otu_table(ps.top) <- otu_table(ps.top) +1
# order sample by plasma and control
#df <- data.frame(sample_data(ps)$SampleCode, sample_data(ps)$Sample_Type)
#sam.order <- as.character(df$sample_data.ps..SampleCode)
sam.order <- rownames(sample_data(ps)[order(get_variable(ps, "Sample_Type"))])
low = "#000033"; high = "#66CCFF";na.value = "black"
new_gradient <- scale_fill_gradient(low = low, high = high, na.value = na.value, breaks = c(0.001, 0.01, 0.1, 1), name="asinh\nabundance")
sample_data(ps.top)$block <- factor(sample_data(ps.top)$block)
levels(sample_data(ps.top)$block) <- c("Set 1", "Set 2", "Set P")
p <- plot_heatmap(ps.top, sample.label = "SampleCode", taxa.label="Species", taxa.order = top, sample.order = sam.order, high = high, low = low) +
geom_tile() +
guides(fill = guide_legend(title="asinh abundance")) + theme(strip.background = element_blank(), axis.text = element_text(size = 8))
p
p <- plot_heatmap(ps.top, sample.label = "SampleCode", taxa.label="Species", taxa.order = top, sample.order = sam.order, high = high, low = low) +
geom_tile() +
guides(fill = guide_legend(title="asinh abundance")) +
facet_wrap(~block, scales = "free_x") + theme(strip.background = element_blank(), axis.text = element_text(size = 8))
p
p <- p+ theme(axis.text.x=element_blank(), axis.ticks.x=element_blank())+theme(plot.margin=unit(c(0,0.5,0.5,0.5),"lines"))
# adding bar for plasma and control
make_hcb <- function(data, var, name = NULL, fillScale = NULL, ...) {
hcb <- ggplot(data=data, aes_string(x="index", y=1, fill=var)) +
geom_raster() +
scale_y_continuous(expand=c(0,0), breaks=1, labels=name) +
scale_x_continuous(expand=c(0,0)) +
xlab(NULL) + ylab(NULL) +
theme(axis.title=element_blank(), axis.ticks=element_blank()) +
theme(axis.text.x=element_blank()) +
theme(axis.text.y=element_text(size=8, face="bold")) +
theme(plot.margin=unit(c(0,0,0,0),"lines"),
axis.ticks.margin = unit(0,"null"), ...) +
guides(fill=F)
if(!is.null(fillScale)) hcb <- hcb + fillScale
return(hcb)
}
library(RColorBrewer)
CSTColors <- brewer.pal(6,"Paired")[c(1,3,2,5,4,6)] # Length 6 for consistency with pre-revision CST+ coloration
names(CSTColors) <- c("Plasma","Control")
CSTColorScale <- scale_colour_manual(name = "Sample Type", values = CSTColors[1:2])
CSTFillScale <- scale_fill_manual(name = "Sample Type", values = CSTColors[1:2])
hcbdf <- data.frame(sample_data(ps))[sam.order,]
hcbdf$index <- seq(1,nsamples(ps))
hcb <- make_hcb(hcbdf, "Sample_Type", name="Sample Type", fillScale = CSTFillScale)
hcb <- hcb + annotate("text", x=tapply(hcbdf$index, hcbdf[,"Sample_Type",drop=T], mean), y=1, label=levels(hcbdf[,"Sample_Type",drop=T]), size=2)
hcb
hmap=p
hcbdf <- data.frame(sample_data(ps.top))[sam.order,]
hcbdf$index <- seq(1,nsamples(ps.top))
hcb <- make_hcb(hcbdf, "Sample_Type", name="Sample Type", fillScale = CSTFillScale)
hcb <- hcb + annotate("text", x=tapply(hcbdf$index, hcbdf[,"Sample_Type",drop=T], mean), y=1, label=levels(hcbdf[,"Sample_Type",drop=T]), size=2)
mush <- function(hmap, hcbs) {
cbgs <- lapply(hcbs, ggplotGrob)
hmg <- ggplotGrob(hmap)
# Make sure both plots have the same width in our final output
cbWidths <- lapply(cbgs, function(x) x$widths[1:4])
maxWidth <- do.call(unit.pmax, cbWidths)
maxWidth <- unit.pmax(hmg$widths[1:4], maxWidth)
# For visibility, set to the maximum width
hmg$widths[1:4] <- as.list(maxWidth)
for(i in seq_along(cbgs)) {
cbgs[[i]]$widths[1:5] <- as.list(unit.c(maxWidth, hmg$widths[5]+hmg$widths[6]))
}
heights <- unit.c(unit(rep(1,length(cbgs)), "lines"), unit(1, "null"))
rval <- do.call(arrangeGrob, args = c(cbgs, list(hmg), ncol=1, heights=list(heights)))
return(rval)
}
hmap=p
hcbs = list(hcbs)
hcbs = list(hcb)
cbgs <- lapply(hcbs, ggplotGrob)
cbgs
hmg <- ggplotGrob(hmap)
hmg
# Make sure both plots have the same width in our final output
cbWidths <- lapply(cbgs, function(x) x$widths[1:4])
cbWidths
maxWidth <- do.call(unit.pmax, cbWidths)
maxWidth <- unit.pmax(hmg$widths[1:4], maxWidth)
p <- mush(p, list(hcb))
p
print(p)
ggsave("./Figures/heatmap_SIRS_top.eps", plot = p, width = 10, height = 6)
hm <- mush(p, list(hcb))
ps.top <- ps
# do arcsinh transformation
ot <- otu_table(ps.top) %>% data.frame %>% as.matrix
geo_mean <- function(x) {
if(all(x == 0)){
val <- 0
}else{
val <- exp(sum(log(x[x > 0]))/length(x))
}
return(val)
}
geom_mean_row <- apply(ot, 1, FUN = geo_mean)
sj <- estimateSizeFactorsForMatrix(ot, median, geoMeans = geom_mean_row)
ot.trans <- t(asinh(t(ot)/sj))
ps.top <- phyloseq(otu_table(ot.trans, taxa_are_rows = TRUE), sample_data(ps.top), tax_table(ps.top))
# choose top 30 species in plasma samples for heatmap
top <- names(sort(taxa_sums(subset_samples(ps.top, Sample_Type == "Plasma")), decreasing=TRUE))[1:30]
ps.top <- prune_taxa(top, ps.top)
otu_table(ps.top) <- otu_table(ps.top) +1
# order sample by plasma and control
#df <- data.frame(sample_data(ps)$SampleCode, sample_data(ps)$Sample_Type)
#sam.order <- as.character(df$sample_data.ps..SampleCode)
sam.order <- rownames(sample_data(ps)[order(get_variable(ps, "Sample_Type"))])
low = "#000033"; high = "#66CCFF";na.value = "black"
new_gradient <- scale_fill_gradient(low = low, high = high, na.value = na.value, breaks = c(0.001, 0.01, 0.1, 1), name="asinh\nabundance")
sample_data(ps.top)$block <- factor(sample_data(ps.top)$block)
levels(sample_data(ps.top)$block) <- c("Set 1", "Set 2", "Set P")
p <- plot_heatmap(ps.top, sample.label = "SampleCode", taxa.label="Species", taxa.order = top, sample.order = sam.order, high = high, low = low) +
geom_tile() +
guides(fill = guide_legend(title="asinh abundance")) +
facet_wrap(~block, scales = "free_x") + theme(strip.background = element_blank(), axis.text = element_text(size = 8))
p
p <- p+ theme(axis.text.x=element_blank(), axis.ticks.x=element_blank())+theme(plot.margin=unit(c(0,0.5,0.5,0.5),"lines"))
# adding bar for plasma and control
make_hcb <- function(data, var, name = NULL, fillScale = NULL, ...) {
hcb <- ggplot(data=data, aes_string(x="index", y=1, fill=var)) +
geom_raster() +
scale_y_continuous(expand=c(0,0), breaks=1, labels=name) +
scale_x_continuous(expand=c(0,0)) +
xlab(NULL) + ylab(NULL) +
theme(axis.title=element_blank(), axis.ticks=element_blank()) +
theme(axis.text.x=element_blank()) +
theme(axis.text.y=element_text(size=8, face="bold")) +
theme(plot.margin=unit(c(0,0,0,0),"lines"),
axis.ticks.margin = unit(0,"null"), ...) +
guides(fill=F)
if(!is.null(fillScale)) hcb <- hcb + fillScale
return(hcb)
}
library(RColorBrewer)
CSTColors <- brewer.pal(6,"Paired")[c(1,3,2,5,4,6)] # Length 6 for consistency with pre-revision CST+ coloration
names(CSTColors) <- c("Plasma","Control")
CSTColorScale <- scale_colour_manual(name = "Sample Type", values = CSTColors[1:2])
CSTFillScale <- scale_fill_manual(name = "Sample Type", values = CSTColors[1:2])
hcbdf <- data.frame(sample_data(ps.top))[sam.order,]
hcbdf$index <- seq(1,nsamples(ps.top))
hcb <- make_hcb(hcbdf, "Sample_Type", name="Sample Type", fillScale = CSTFillScale)
hcb <- hcb + annotate("text", x=tapply(hcbdf$index, hcbdf[,"Sample_Type",drop=T], mean), y=1, label=levels(hcbdf[,"Sample_Type",drop=T]), size=2)
mush <- function(hmap, hcbs) {
cbgs <- lapply(hcbs, ggplotGrob)
hmg <- ggplotGrob(hmap)
# Make sure both plots have the same width in our final output
cbWidths <- lapply(cbgs, function(x) x$widths[1:4])
maxWidth <- do.call(unit.pmax, cbWidths)
maxWidth <- unit.pmax(hmg$widths[1:4], maxWidth)
# For visibility, set to the maximum width
hmg$widths[1:4] <- as.list(maxWidth)
for(i in seq_along(cbgs)) {
cbgs[[i]]$widths[1:5] <- as.list(unit.c(maxWidth, hmg$widths[5]+hmg$widths[6]))
}
heights <- unit.c(unit(rep(1,length(cbgs)), "lines"), unit(1, "null"))
rval <- do.call(arrangeGrob, args = c(cbgs, list(hmg), ncol=1, heights=list(heights)))
return(rval)
}
hm <- mush(p, list(hcb))
hm
ggsave("./Figures/heatmap_SIRS_top.eps", plot =hm, width = 10, height = 6)
ps.top <- ps
# do arcsinh transformation
ot <- otu_table(ps.top) %>% data.frame %>% as.matrix
geo_mean <- function(x) {
if(all(x == 0)){
val <- 0
}else{
val <- exp(sum(log(x[x > 0]))/length(x))
}
return(val)
}
geom_mean_row <- apply(ot, 1, FUN = geo_mean)
sj <- estimateSizeFactorsForMatrix(ot, median, geoMeans = geom_mean_row)
ot.trans <- t(asinh(t(ot)/sj))
ps.top <- phyloseq(otu_table(ot.trans, taxa_are_rows = TRUE), sample_data(ps.top), tax_table(ps.top))
# choose top 30 species in plasma samples for heatmap
top <- names(sort(taxa_sums(subset_samples(ps.top, Sample_Type == "Plasma")), decreasing=TRUE))[1:30]
ps.top <- prune_taxa(top, ps.top)
otu_table(ps.top) <- otu_table(ps.top) +1
# order sample by plasma and control
df <- data.frame(sample_data(ps)$SampleCode, sample_data(ps)$Sample_Type)
sam.order <- as.character(df$sample_data.ps..SampleCode)
sample_data(ps.top)$block <- factor(sample_data(ps.top)$block)
levels(sample_data(ps.top)$block) <- c("Set 1", "Set 2", "Set P")
p <- plot_heatmap(ps.top, sample.label = "SampleCode", taxa.label="Species", taxa.order = top, sample.order = sam.order, high = high, low = low) +
geom_tile() +
guides(fill = guide_legend(title="asinh abundance")) +
facet_wrap(~block, scales = "free_x") + theme(strip.background = element_blank(), axis.text = element_text(size = 8))
p
ggsave("./Figures/heatmap_SIRS_top.eps", plot = p, width = 10, height = 6)
p <- p+ theme(axis.text.x=element_blank(), axis.ticks.x=element_blank())+theme(plot.margin=unit(c(0,0.5,0.5,0.5),"lines"))
p
ggsave("./Figures/heatmap_SIRS_top.eps", plot = p, width = 10, height = 6)
p
p <- plot_heatmap(ps.top, sample.label = "SampleCode", taxa.label="Species", taxa.order = top, sample.order = sam.order, high = high, low = low) +
geom_tile() +
guides(fill = guide_legend(title="asinh abundance")) +
facet_grid(~block, scales = "free_x") + theme(strip.background = element_blank(), axis.text = element_text(size = 8))
# p <- p+ theme(axis.text.x=element_blank(), axis.ticks.x=element_blank())+theme(plot.margin=unit(c(0,0.5,0.5,0.5),"lines"))
p
p <- plot_heatmap(ps.top, sample.label = "SampleCode", taxa.label="Species", taxa.order = top, sample.order = sam.order, high = high, low = low) +
geom_tile() +
guides(fill = guide_legend(title="asinh abundance")) +
facet_grid(~block, scales = "free_x", switch = "x") + theme(strip.background = element_blank(), axis.text = element_text(size = 8))
# p <- p+ theme(axis.text.x=element_blank(), axis.ticks.x=element_blank())+theme(plot.margin=unit(c(0,0.5,0.5,0.5),"lines"))
p
p <- plot_heatmap(ps.top, sample.label = "SampleCode", taxa.label="Species", taxa.order = top, sample.order = sam.order, high = high, low = low) +
geom_tile() +
guides(fill = guide_legend(title="asinh abundance")) +
facet_grid(~block+Sample_Type, scales = "free_x") + theme(strip.background = element_blank(), axis.text = element_text(size = 8))
# p <- p+ theme(axis.text.x=element_blank(), axis.ticks.x=element_blank())+theme(plot.margin=unit(c(0,0.5,0.5,0.5),"lines"))
p
p <- p+ theme(axis.text.x=element_blank(), axis.ticks.x=element_blank())
p
ggsave("./Figures/heatmap_SIRS_top.eps", plot = p, width = 10, height = 6)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
#library(BARBI)
library(devtools)
library(phyloseq)
library(DESeq2)
library(dplyr)
library(tidyr)
library(R.utils)
library(BiocParallel)
library(doParallel)
library(parallel)
library(HDInterval)
library(grid)
library(xtable)
library(gtable)
library(gridExtra)
library(BiocStyle)
library(magrittr)
library(ggplot2)
sourceDirectory("./R")
#sourceDirectory("/Users/jpratheepa31/Dropbox/GitHub/SIRS_project/Final_Results_For_Manuscript/R")
ncores = as.integer(Sys.getenv("SLURM_NTASKS"))
if(is.na(ncores)) ncores <- parallel::detectCores()
ps <- readRDS("./Data/ps_sirs_updated_may_1_2018.rds")
ps
if(dim(otu_table(ps))[1]!=ntaxa(ps)){otu_table(ps) <- t(otu_table(ps))}
ps <- subset_samples(ps, !(Sample_Type == "Library_Control"))
mapp <- readxl::read_excel("./Data/Pt_and_P.xlsx")
sample_names(ps)[which(sample_names(ps) %in% mapp$P)] <- mapp$Pt
sample_data(ps)$SampleCode <- sample_names(ps)
ps <- subset_samples(ps, !(SampleType == "Healthy"))
set1 <- c("1","2","3","4","11","12")
set2 <- c("5","6","7","8","9","10")
setP <- "P"
ext.num <- sample_data(ps)$Extraction_Number
blocks <- ifelse(ext.num %in% set1, "Set1", ifelse(ext.num %in% set2, "Set2","SetP"))
sample_data(ps)$block <- blocks
ps <- subset_samples(ps,Sample_Type %in% c("Plasma","Control"))
saveRDS(ps, "./Data/psJan18.rds")
summary(sample_data(subset_samples(ps, Sample_Type == "Plasma"))$Reads)/(2*10^6)
summary(sample_data(subset_samples(ps, Sample_Type == "Control"))$Reads)/(2*10^6)
summary(sample_data(subset_samples(ps, Sample_Type == "Plasma"))$Non.Human.Reads)/(2*10^4)
summary(sample_data(subset_samples(ps, Sample_Type == "Control"))$Non.Human.Reads)/(2*10^5)
summary(sample_data(subset_samples(ps, Sample_Type == "Plasma"))$Percent.Non.Human)
summary(sample_data(subset_samples(ps, Sample_Type == "Control"))$Percent.Non.Human)
ps.top <- ps
# do arcsinh transformation
ot <- otu_table(ps.top) %>% data.frame %>% as.matrix
geo_mean <- function(x) {
if(all(x == 0)){
val <- 0
}else{
val <- exp(sum(log(x[x > 0]))/length(x))
}
return(val)
}
geom_mean_row <- apply(ot, 1, FUN = geo_mean)
sj <- estimateSizeFactorsForMatrix(ot, median, geoMeans = geom_mean_row)
ot.trans <- t(asinh(t(ot)/sj))
ps.top <- phyloseq(otu_table(ot.trans, taxa_are_rows = TRUE), sample_data(ps.top), tax_table(ps.top))
# choose top 30 species in plasma samples for heatmap
top <- names(sort(taxa_sums(subset_samples(ps.top, Sample_Type == "Plasma")), decreasing=TRUE))[1:30]
ps.top <- prune_taxa(top, ps.top)
otu_table(ps.top) <- otu_table(ps.top) +1
# order sample by plasma and control
df <- data.frame(sample_data(ps)$SampleCode, sample_data(ps)$Sample_Type)
sam.order <- as.character(df$sample_data.ps..SampleCode)
sample_data(ps.top)$block <- factor(sample_data(ps.top)$block)
levels(sample_data(ps.top)$block) <- c("Set 1", "Set 2", "Set P")
p <- plot_heatmap(ps.top, sample.label = "SampleCode", taxa.label="Species", taxa.order = top, sample.order = sam.order, high = high, low = low) +
geom_tile() +
guides(fill = guide_legend(title="asinh abundance")) +
facet_grid(~block+Sample_Type, scales = "free_x") + theme(strip.background = element_blank(), axis.text = element_text(size = 8))
p <- p+ theme(axis.text.x=element_blank(), axis.ticks.x=element_blank())
p
ggsave("./Figures/heatmap_SIRS_top.eps", plot = p, width = 10, height = 6)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
#library(BARBI)
library(devtools)
library(phyloseq)
library(DESeq2)
library(dplyr)
library(tidyr)
library(R.utils)
library(BiocParallel)
library(doParallel)
library(parallel)
library(HDInterval)
library(grid)
library(xtable)
library(gtable)
library(gridExtra)
library(BiocStyle)
library(magrittr)
library(ggplot2)
sourceDirectory("./R")
#sourceDirectory("/Users/jpratheepa31/Dropbox/GitHub/SIRS_project/Final_Results_For_Manuscript/R")
ncores = as.integer(Sys.getenv("SLURM_NTASKS"))
if(is.na(ncores)) ncores <- parallel::detectCores()
ps <- readRDS("./Data/ps_sirs_updated_may_1_2018.rds")
ps
if(dim(otu_table(ps))[1]!=ntaxa(ps)){otu_table(ps) <- t(otu_table(ps))}
ps <- subset_samples(ps, !(Sample_Type == "Library_Control"))
mapp <- readxl::read_excel("./Data/Pt_and_P.xlsx")
sample_names(ps)[which(sample_names(ps) %in% mapp$P)] <- mapp$Pt
sample_data(ps)$SampleCode <- sample_names(ps)
ps <- subset_samples(ps, !(SampleType == "Healthy"))
set1 <- c("1","2","3","4","11","12")
set2 <- c("5","6","7","8","9","10")
setP <- "P"
ext.num <- sample_data(ps)$Extraction_Number
blocks <- ifelse(ext.num %in% set1, "Set1", ifelse(ext.num %in% set2, "Set2","SetP"))
sample_data(ps)$block <- blocks
ps <- subset_samples(ps,Sample_Type %in% c("Plasma","Control"))
saveRDS(ps, "./Data/psJan18.rds")
summary(sample_data(subset_samples(ps, Sample_Type == "Plasma"))$Reads)/(2*10^6)
summary(sample_data(subset_samples(ps, Sample_Type == "Control"))$Reads)/(2*10^6)
summary(sample_data(subset_samples(ps, Sample_Type == "Plasma"))$Non.Human.Reads)/(2*10^4)
summary(sample_data(subset_samples(ps, Sample_Type == "Control"))$Non.Human.Reads)/(2*10^5)
summary(sample_data(subset_samples(ps, Sample_Type == "Plasma"))$Percent.Non.Human)
summary(sample_data(subset_samples(ps, Sample_Type == "Control"))$Percent.Non.Human)
ps.top <- ps
# do arcsinh transformation
ot <- otu_table(ps.top) %>% data.frame %>% as.matrix
geo_mean <- function(x) {
if(all(x == 0)){
val <- 0
}else{
val <- exp(sum(log(x[x > 0]))/length(x))
}
return(val)
}
geom_mean_row <- apply(ot, 1, FUN = geo_mean)
sj <- estimateSizeFactorsForMatrix(ot, median, geoMeans = geom_mean_row)
ot.trans <- t(asinh(t(ot)/sj))
ps.top <- phyloseq(otu_table(ot.trans, taxa_are_rows = TRUE), sample_data(ps.top), tax_table(ps.top))
# choose top 30 species in plasma samples for heatmap
top <- names(sort(taxa_sums(subset_samples(ps.top, Sample_Type == "Plasma")), decreasing=TRUE))[1:30]
ps.top <- prune_taxa(top, ps.top)
otu_table(ps.top) <- otu_table(ps.top) +1
# order sample by plasma and control
df <- data.frame(sample_data(ps)$SampleCode, sample_data(ps)$Sample_Type)
sam.order <- as.character(df$sample_data.ps..SampleCode)
sample_data(ps.top)$block <- factor(sample_data(ps.top)$block)
levels(sample_data(ps.top)$block) <- c("Set 1", "Set 2", "Set P")
p <- plot_heatmap(ps.top, sample.label = "SampleCode", taxa.label="Species", taxa.order = top, sample.order = sam.order, high = high, low = low) +
geom_tile() +
guides(fill = guide_legend(title="arcsinh ")) +
facet_grid(~block+Sample_Type, scales = "free_x") + theme(strip.background = element_blank(), axis.text = element_text(size = 8))
p <- plot_heatmap(ps.top, sample.label = "SampleCode", taxa.label="Species", taxa.order = top, sample.order = sam.order) +
geom_tile() +
guides(fill = guide_legend(title="arcsinh ")) +
facet_grid(~block+Sample_Type, scales = "free_x") + theme(strip.background = element_blank(), axis.text = element_text(size = 8))
p <- p+ theme(axis.text.x=element_blank(), axis.ticks.x=element_blank())
p
ggsave("./Figures/heatmap_SIRS_top.eps", plot = p, width = 10, height = 6)
