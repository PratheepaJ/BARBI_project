ot <- otu_table(ps.top.cont) %>% data.frame %>% as.matrix
geo_mean <- function(x) {
if(all(x == 0)){
val <- 0
}else{
val <- exp(sum(log(x[x > 0]))/length(x))
}
return(val)
}
geom_mean_row <- apply(ot, 1, FUN = geo_mean)
sj <- estimateSizeFactorsForMatrix(ot, median, geoMeans = geom_mean_row)
ot.trans <- t(asinh(t(ot)/sj))
ps.top.cont <- phyloseq(otu_table(ot.trans, taxa_are_rows = TRUE), sample_data(ps.top.cont), tax_table(ps.top.cont))
# choose top 30 species in plasma samples for heatmap
top <- names(sort(taxa_sums(subset_samples(ps.top.cont, Sample_Type == "Control")), decreasing=TRUE))[1:30]
ps.top.cont <- prune_taxa(top, ps.top.cont)
otu_table(ps.top.cont) <- otu_table(ps.top.cont) +1
# order sample by plasma and control
df <- data.frame(sample_data(ps)$SampleCode, sample_data(ps)$Sample_Type)
sam.order <- as.character(df$sample_data.ps..SampleCode)
p <- plot_heatmap(ps.top.cont, sample.label = "SampleCode", taxa.label="Species", taxa.order = top, sample.order = sam.order) + guides(fill = guide_legend(title="asinh abundance")) + facet_wrap(~block, scales = "free_x")
p
ggsave("./Figures/heatmap_SIRS_top_control.eps", plot = p, width = 20, height = 8)
ps <- prune_taxa(taxa_sums(ps) > 0, ps)
ps_plasma <- subset_samples(ps,Sample_Type %in% c("Plasma"))
prevTaxaP <- apply(otu_table(ps_plasma), 1 ,function(x){sum(x>0)})
Contaminants1 <- names(prevTaxaP)[prevTaxaP==0]
ps <- prune_taxa(prevTaxaP > 0,ps)
ps
totalReads <- colSums(otu_table(ps))
hist(log(totalReads), yaxs="i", xaxs="i", main="Distribution of total reads per sample", breaks=50)
table(sample_data(ps)$Sample_Type, sample_data(ps)$block)
psBlockResult <- psBlockResults(ps, sampleTypeVar = "Sample_Type", caselevels = c("Plasma"), controllevel= "Control", sampleName = "SampleCode", blockVar = "block")
psByBlock <- psBlockResult[[1]]
psNCbyBlock <- psBlockResult[[2]]
psallzeroInNC <- psBlockResult[[3]]
psPlByBlock <- psBlockResult[[4]]
saveRDS(psByBlock,"./Results/psByBlock.rds")
alphaBetaNegControl <- alphaBetaNegControl(psNCbyBlock = psNCbyBlock, stringent = TRUE)
num_blks <- length(alphaBetaNegControl)
blks <- seq(1, num_blks) %>% as.list
gammaPrior_all_blks <- lapply(blks, function(x){
gammaPrior <- alphaBetaContInPlasma(psPlByBlock = psPlByBlock, psallzeroInNC = psallzeroInNC, blk = x, alphaBetaNegControl=alphaBetaNegControl)
return(gammaPrior)
})
itera <- 100
burnIn <- 5
cov_pro <- .95
mak_tab <- TRUE # need to change to TRUE if you want to make tables
#psByBlock <- readRDS("./Results/psByBlock2.rds")
gammaPrior_posTrueSing_all_blocks <- readRDS("./Results/gammaPrior_posTrueSing_all_blocks_SIRS.rds")
gammaPrior_all_blks <- gammaPrior_posTrueSing_all_blocks[[1]]
post_all_blocks <- gammaPrior_posTrueSing_all_blocks[[2]]
all_real_taxa_lt <- list()
for(blk in 1:num_blks){
taxa_post_all_sam <- post_all_blocks[[blk]]
gammPrior <- gammaPrior_all_blks[[blk]]
total_summary_table <- NULL
all_real_taxa <- character()
for(sam in 1:nsamples(psPlByBlock[[blk]])){
taxa_post <- taxa_post_all_sam[[sam]]
acceptance <- list()
exp_post_s <- list()
lower_s <- list()
upper_s <- list()
lower_b <- list()
upper_b <- list()
all_zero_nc <- list()
signal_to_noise_ratio_lower <- list()
for(taxa in 1:length(taxa_post)){
burnIn  <- burnIn
acceptance[[taxa]]  <-  1-mean(duplicated(taxa_post[[taxa]][-(1:burnIn),]))
exp_post_s[[taxa]] <- mean(taxa_post[[taxa]][-(1:burnIn),])
hdi_v <- hdi(taxa_post[[taxa]][-(1:burnIn),], credMass = cov_pro)
lower_s[[taxa]] <- round(hdi_v[1], digits = 0)
upper_s[[taxa]] <- round(hdi_v[2], digits = 0)
b_int <- rgamma((itera-burnIn+1), shape = gammPrior[[sam]][[1]][taxa], rate = gammPrior[[sam]][[2]][taxa])
hdi_b <- hdi(b_int, credMass = cov_pro)
lower_b[[taxa]] <- round(hdi_b[1], digits = 0)
upper_b[[taxa]] <- round(hdi_b[2], digits = 0)
all_zero_nc[[taxa]] <-  gammPrior[[sam]][[5]][taxa]
sig_noise_ratio <- taxa_post[[taxa]][-(1:burnIn),]/b_int
sig_noise_ra_hdi <- hdi(sig_noise_ratio, credMass = cov_pro)
signal_to_noise_ratio_lower[[taxa]] <- sig_noise_ra_hdi[[1]]
}
df <- data.frame(Species=taxa_names(psPlByBlock[[blk]]),
xj=as.numeric(gammPrior[[sam]][[3]]),
l_s = unlist(lower_s),
u_s = unlist(upper_s),
l_b = unlist(lower_b),
u_b = unlist(upper_b),
all_zero_nc = unlist(all_zero_nc)
)
df <- arrange(filter(df,((l_s>u_b)&(l_s>0))), desc(xj))
if(dim(df)[1]==0){
df <- data.frame(Species="Negative",
xj="Negative",
l_s="Negative",
u_s="Negative",
l_b ="Negative",
u_b="Negative",
all_zero_nc = "Negative")
}
all_real_taxa <- c(all_real_taxa,
as.character(df$Species))
if(mak_tab){
filname <- paste("./Results/",
sample_names(psPlByBlock[[blk]])[sam],
".png",
sep="")
png(filname, height = 600, width = 750)
df_p <- tableGrob(df)
title <- textGrob(sample_names(psPlByBlock[[blk]])[sam], gp = gpar(fontsize = 12))
padding <- unit(0.5,"line")
df_p <- gtable_add_rows(
df_p, heights = grobHeight(title) + padding, pos = 0
)
df_p <- gtable_add_grob(
df_p, list(title),
t = 1, l = 1, r = ncol(df_p)
)
grid.newpage()
grid.draw(df_p)
dev.off()
}
all_real_taxa <- unique(all_real_taxa)
}
all_real_taxa_lt[[blk]] <- all_real_taxa
}
itera <- 100
burnIn <- 5
cov_pro <- .95
mak_tab <- TRUE # need to change to TRUE if you want to make tables
#psByBlock <- readRDS("./Results/psByBlock2.rds")
gammaPrior_posTrueSing_all_blocks <- readRDS("./Results/gammaPrior_posTrueSing_all_blocks_SIRS.rds")
gammaPrior_all_blks <- gammaPrior_posTrueSing_all_blocks[[1]]
post_all_blocks <- gammaPrior_posTrueSing_all_blocks[[2]]
all_real_taxa_lt <- list()
for(blk in 1:num_blks){
taxa_post_all_sam <- post_all_blocks[[blk]]
gammPrior <- gammaPrior_all_blks[[blk]]
total_summary_table <- NULL
all_real_taxa <- character()
for(sam in 1:nsamples(psPlByBlock[[blk]])){
taxa_post <- taxa_post_all_sam[[sam]]
acceptance <- list()
exp_post_s <- list()
lower_s <- list()
upper_s <- list()
lower_b <- list()
upper_b <- list()
all_zero_nc <- list()
signal_to_noise_ratio_lower <- list()
for(taxa in 1:length(taxa_post)){
burnIn  <- burnIn
acceptance[[taxa]]  <-  1-mean(duplicated(taxa_post[[taxa]][-(1:burnIn),]))
exp_post_s[[taxa]] <- mean(taxa_post[[taxa]][-(1:burnIn),])
hdi_v <- hdi(taxa_post[[taxa]][-(1:burnIn),], credMass = cov_pro)
lower_s[[taxa]] <- round(hdi_v[1], digits = 0)
upper_s[[taxa]] <- round(hdi_v[2], digits = 0)
b_int <- rgamma((itera-burnIn+1), shape = gammPrior[[sam]][[1]][taxa], rate = gammPrior[[sam]][[2]][taxa])
hdi_b <- hdi(b_int, credMass = cov_pro)
lower_b[[taxa]] <- round(hdi_b[1], digits = 0)
upper_b[[taxa]] <- round(hdi_b[2], digits = 0)
all_zero_nc[[taxa]] <-  gammPrior[[sam]][[5]][taxa]
sig_noise_ratio <- taxa_post[[taxa]][-(1:burnIn),]/b_int
sig_noise_ra_hdi <- hdi(sig_noise_ratio, credMass = cov_pro)
signal_to_noise_ratio_lower[[taxa]] <- sig_noise_ra_hdi[[1]]
}
df <- data.frame(Species=taxa_names(psPlByBlock[[blk]]),
xj=as.numeric(gammPrior[[sam]][[3]]),
l_s = unlist(lower_s),
u_s = unlist(upper_s),
l_b = unlist(lower_b),
u_b = unlist(upper_b),
all_zero_nc = unlist(all_zero_nc)
)
df <- arrange(filter(df,((l_s>u_b)&(l_s>0))), desc(xj))
if(dim(df)[1]==0){
df <- data.frame(Species="Negative",
xj="Negative",
l_s="Negative",
u_s="Negative",
l_b ="Negative",
u_b="Negative",
all_zero_nc = "Negative")
}
all_real_taxa <- c(all_real_taxa,
as.character(df$Species))
if(mak_tab){
filname <- paste("./Results/",
sample_names(psPlByBlock[[blk]])[sam],
".png",
sep="")
png(filname, height = 600, width = 750)
df_p <- tableGrob(df)
title <- textGrob(sample_names(psPlByBlock[[blk]])[sam], gp = gpar(fontsize = 12))
padding <- unit(0.5,"line")
df_p <- gtable_add_rows(
df_p, heights = grobHeight(title) + padding, pos = 0
)
df_p <- gtable_add_grob(
df_p, list(title),
t = 1, l = 1, r = ncol(df_p)
)
grid.newpage()
grid.draw(df_p)
dev.off()
}
all_real_taxa <- unique(all_real_taxa)
}
all_real_taxa_lt[[blk]] <- all_real_taxa
}
itera <- 100
burnIn <- 5
cov_pro <- .95
mak_tab <- TRUE # need to change to TRUE if you want to make tables
#psByBlock <- readRDS("./Results/psByBlock2.rds")
gammaPrior_posTrueSing_all_blocks <- readRDS("./Results/gammaPrior_posTrueSing_all_blocks_SIRS.rds")
gammaPrior_all_blks <- gammaPrior_posTrueSing_all_blocks[[1]]
post_all_blocks <- gammaPrior_posTrueSing_all_blocks[[2]]
all_real_taxa_lt <- list()
for(blk in 1:num_blks){
taxa_post_all_sam <- post_all_blocks[[blk]]
gammPrior <- gammaPrior_all_blks[[blk]]
total_summary_table <- NULL
all_real_taxa <- character()
for(sam in 1:nsamples(psPlByBlock[[blk]])){
taxa_post <- taxa_post_all_sam[[sam]]
acceptance <- list()
exp_post_s <- list()
lower_s <- list()
upper_s <- list()
lower_b <- list()
upper_b <- list()
all_zero_nc <- list()
signal_to_noise_ratio_lower <- list()
for(taxa in 1:length(taxa_post)){
burnIn  <- burnIn
acceptance[[taxa]]  <-  1-mean(duplicated(taxa_post[[taxa]][-(1:burnIn),]))
exp_post_s[[taxa]] <- mean(taxa_post[[taxa]][-(1:burnIn),])
hdi_v <- hdi(taxa_post[[taxa]][-(1:burnIn),], credMass = cov_pro)
lower_s[[taxa]] <- round(hdi_v[1], digits = 0)
upper_s[[taxa]] <- round(hdi_v[2], digits = 0)
b_int <- rgamma((itera-burnIn+1), shape = gammPrior[[sam]][[1]][taxa], rate = gammPrior[[sam]][[2]][taxa])
hdi_b <- hdi(b_int, credMass = cov_pro)
lower_b[[taxa]] <- round(hdi_b[1], digits = 0)
upper_b[[taxa]] <- round(hdi_b[2], digits = 0)
all_zero_nc[[taxa]] <-  gammPrior[[sam]][[5]][taxa]
sig_noise_ratio <- taxa_post[[taxa]][-(1:burnIn),]/b_int
sig_noise_ra_hdi <- hdi(sig_noise_ratio, credMass = cov_pro)
signal_to_noise_ratio_lower[[taxa]] <- sig_noise_ra_hdi[[1]]
}
df <- data.frame(Species=taxa_names(psPlByBlock[[blk]]),
xj=as.numeric(gammPrior[[sam]][[3]]),
l_s = unlist(lower_s),
u_s = unlist(upper_s),
l_b = unlist(lower_b),
u_b = unlist(upper_b),
all_zero_nc = unlist(all_zero_nc)
)
df <- arrange(filter(df,((l_s>u_b)&(l_s>0))), desc(xj))
if(dim(df)[1]==0){
df <- data.frame(Species="Negative",
xj="Negative",
l_s="Negative",
u_s="Negative",
l_b ="Negative",
u_b="Negative",
all_zero_nc = "Negative")
}
all_real_taxa <- c(all_real_taxa,
as.character(df$Species))
if(mak_tab){
filname <- paste("./Results/",
sample_names(psPlByBlock[[blk]])[sam],
".png",
sep="")
png(filname, height = 600, width = 750)
df_p <- tableGrob(df)
title <- textGrob(sample_names(psPlByBlock[[blk]])[sam], gp = gpar(fontsize = 12))
padding <- unit(0.5,"line")
df_p <- gtable_add_rows(
df_p, heights = grobHeight(title) + padding, pos = 0
)
df_p <- gtable_add_grob(
df_p, list(title),
t = 1, l = 1, r = ncol(df_p)
)
grid.newpage()
grid.draw(df_p)
dev.off()
}
all_real_taxa <- unique(all_real_taxa)
}
all_real_taxa_lt[[blk]] <- all_real_taxa
}
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
#library(BARBI)
library(devtools)
library(phyloseq)
library(DESeq2)
library(dplyr)
library(tidyr)
library(R.utils)
library(BiocParallel)
library(doParallel)
library(parallel)
library(HDInterval)
library(grid)
library(xtable)
library(gtable)
library(gridExtra)
library(BiocStyle)
library(magrittr)
library(ggplot2)
sourceDirectory("./R")
#sourceDirectory("/Users/jpratheepa31/Dropbox/GitHub/SIRS_project/Final_Results_For_Manuscript/R")
ncores = as.integer(Sys.getenv("SLURM_NTASKS"))
if(is.na(ncores)) ncores <- parallel::detectCores()
ps <- readRDS("./Data/ps_sirs_updated_may_1_2018.rds")
ps
if(dim(otu_table(ps))[1]!=ntaxa(ps)){otu_table(ps) <- t(otu_table(ps))}
ps <- subset_samples(ps, !(Sample_Type == "Library_Control"))
mapp <- readxl::read_excel("./Data/Pt_and_P.xlsx")
sample_names(ps)[which(sample_names(ps) %in% mapp$P)] <- mapp$Pt
sample_data(ps)$SampleCode <- sample_names(ps)
ps <- subset_samples(ps, !(SampleType == "Healthy"))
set1 <- c("1","2","3","4","11","12")
set2 <- c("5","6","7","8","9","10")
setP <- "P"
ext.num <- sample_data(ps)$Extraction_Number
blocks <- ifelse(ext.num %in% set1, "Set1", ifelse(ext.num %in% set2, "Set2","SetP"))
sample_data(ps)$block <- blocks
ps <- subset_samples(ps,Sample_Type %in% c("Plasma","Control"))
saveRDS(ps, "./Data/psJan18.rds")
summary(sample_data(subset_samples(ps, Sample_Type == "Plasma"))$Reads)/(2*10^6)
summary(sample_data(subset_samples(ps, Sample_Type == "Control"))$Reads)/(2*10^6)
summary(sample_data(subset_samples(ps, Sample_Type == "Plasma"))$Non.Human.Reads)/(2*10^4)
summary(sample_data(subset_samples(ps, Sample_Type == "Control"))$Non.Human.Reads)/(2*10^5)
summary(sample_data(subset_samples(ps, Sample_Type == "Plasma"))$Percent.Non.Human)
summary(sample_data(subset_samples(ps, Sample_Type == "Control"))$Percent.Non.Human)
ps.top <- ps
# do arcsinh transformation
ot <- otu_table(ps.top) %>% data.frame %>% as.matrix
geo_mean <- function(x) {
if(all(x == 0)){
val <- 0
}else{
val <- exp(sum(log(x[x > 0]))/length(x))
}
return(val)
}
geom_mean_row <- apply(ot, 1, FUN = geo_mean)
sj <- estimateSizeFactorsForMatrix(ot, median, geoMeans = geom_mean_row)
ot.trans <- t(asinh(t(ot)/sj))
ps.top <- phyloseq(otu_table(ot.trans, taxa_are_rows = TRUE), sample_data(ps.top), tax_table(ps.top))
# choose top 30 species in plasma samples for heatmap
top <- names(sort(taxa_sums(subset_samples(ps.top, Sample_Type == "Plasma")), decreasing=TRUE))[1:30]
ps.top <- prune_taxa(top, ps.top)
otu_table(ps.top) <- otu_table(ps.top) +1
# order sample by plasma and control
df <- data.frame(sample_data(ps)$SampleCode, sample_data(ps)$Sample_Type)
sam.order <- as.character(df$sample_data.ps..SampleCode)
p <- plot_heatmap(ps.top, sample.label = "SampleCode", taxa.label="Species", taxa.order = top, sample.order = sam.order) + guides(fill = guide_legend(title="asinh abundance")) + facet_wrap(~block, scales = "free_x")
p
ggsave("./Figures/heatmap_SIRS_top.eps", plot = p, width = 20, height = 8)
ps.top.cont <- ps
# do arcsinh transformation
ot <- otu_table(ps.top.cont) %>% data.frame %>% as.matrix
geo_mean <- function(x) {
if(all(x == 0)){
val <- 0
}else{
val <- exp(sum(log(x[x > 0]))/length(x))
}
return(val)
}
geom_mean_row <- apply(ot, 1, FUN = geo_mean)
sj <- estimateSizeFactorsForMatrix(ot, median, geoMeans = geom_mean_row)
ot.trans <- t(asinh(t(ot)/sj))
ps.top.cont <- phyloseq(otu_table(ot.trans, taxa_are_rows = TRUE), sample_data(ps.top.cont), tax_table(ps.top.cont))
# choose top 30 species in plasma samples for heatmap
top <- names(sort(taxa_sums(subset_samples(ps.top.cont, Sample_Type == "Control")), decreasing=TRUE))[1:30]
ps.top.cont <- prune_taxa(top, ps.top.cont)
otu_table(ps.top.cont) <- otu_table(ps.top.cont) +1
# order sample by plasma and control
df <- data.frame(sample_data(ps)$SampleCode, sample_data(ps)$Sample_Type)
sam.order <- as.character(df$sample_data.ps..SampleCode)
p <- plot_heatmap(ps.top.cont, sample.label = "SampleCode", taxa.label="Species", taxa.order = top, sample.order = sam.order) + guides(fill = guide_legend(title="asinh abundance")) + facet_wrap(~block, scales = "free_x")
p
ggsave("./Figures/heatmap_SIRS_top_control.eps", plot = p, width = 20, height = 8)
ps <- prune_taxa(taxa_sums(ps) > 0, ps)
ps_plasma <- subset_samples(ps,Sample_Type %in% c("Plasma"))
prevTaxaP <- apply(otu_table(ps_plasma), 1 ,function(x){sum(x>0)})
Contaminants1 <- names(prevTaxaP)[prevTaxaP==0]
ps <- prune_taxa(prevTaxaP > 0,ps)
ps
totalReads <- colSums(otu_table(ps))
hist(log(totalReads), yaxs="i", xaxs="i", main="Distribution of total reads per sample", breaks=50)
table(sample_data(ps)$Sample_Type, sample_data(ps)$block)
psBlockResult <- psBlockResults(ps, sampleTypeVar = "Sample_Type", caselevels = c("Plasma"), controllevel= "Control", sampleName = "SampleCode", blockVar = "block")
psByBlock <- psBlockResult[[1]]
psNCbyBlock <- psBlockResult[[2]]
psallzeroInNC <- psBlockResult[[3]]
psPlByBlock <- psBlockResult[[4]]
saveRDS(psByBlock,"./Results/psByBlock.rds")
alphaBetaNegControl <- alphaBetaNegControl(psNCbyBlock = psNCbyBlock, stringent = TRUE)
num_blks <- length(alphaBetaNegControl)
blks <- seq(1, num_blks) %>% as.list
gammaPrior_all_blks <- lapply(blks, function(x){
gammaPrior <- alphaBetaContInPlasma(psPlByBlock = psPlByBlock, psallzeroInNC = psallzeroInNC, blk = x, alphaBetaNegControl=alphaBetaNegControl)
return(gammaPrior)
})
library(tidyr)
itera <- 100
burnIn <- 5
cov_pro <- .95
mak_tab <- TRUE # need to change to TRUE if you want to make tables
#psByBlock <- readRDS("./Results/psByBlock2.rds")
gammaPrior_posTrueSing_all_blocks <- readRDS("./Results/gammaPrior_posTrueSing_all_blocks_SIRS.rds")
gammaPrior_all_blks <- gammaPrior_posTrueSing_all_blocks[[1]]
post_all_blocks <- gammaPrior_posTrueSing_all_blocks[[2]]
blk <- 2
taxa_post_all_sam <- post_all_blocks[[blk]]
gammPrior <- gammaPrior_all_blks[[blk]]
sample.names <- sample_names(psPlByBlock[[blk]])
for(j in 1: length(sample.names)){
desired.sample.name <- sample.names[j]
desired.sample.index <- which(sample_names(psPlByBlock[[blk]]) %in% desired.sample.name)
tax_interested <- rownames(sort(otu_table(psPlByBlock[[blk]])[,desired.sample.index],decreasing = TRUE))[c(1:16)]
tax_interested_ind <- which(as.character(taxa_names(psPlByBlock[[blk]])) %in% tax_interested)
tax_names <- taxa_names(psPlByBlock[[blk]])[tax_interested_ind]
#tax_names <- df.ASV$ASV.Genus[which(as.character(df.ASV$ASV.Genus.Species) %in%  tax_names)]
taxa.post <- taxa_post_all_sam[[desired.sample.index]]
burnIn <- 6
signal.hist <- taxa.post[tax_interested_ind]
signal.hist <- lapply(signal.hist,function(x){x[-(1:burnIn),]})
signal.df <- data.frame(do.call("cbind", signal.hist))
colnames(signal.df) <- tax_names
signal.df$group <- rep("True",length=dim(signal.df)[1])
bg <- list()
for(ind in 1:length(tax_interested_ind)){
bg[[ind]] <- rgamma(5000, shape=gammPrior[[desired.sample.index]][[1]][tax_interested_ind[ind]],rate = gammPrior[[desired.sample.index]][[2]][tax_interested_ind[ind]])
}
bg.df <- data.frame(do.call("cbind",bg))
colnames(bg.df) <- tax_names
bg.df$group <- rep("Contaminant",length=dim(bg.df)[1])
bg.signal <- rbind(signal.df, bg.df)
bg.signal$group <- as.factor(bg.signal$group)
bg_sig_long <- tidyr::gather(bg.signal,key="Taxa",value="Reads",1:(dim(bg.signal)[2]-1))
bg_sig_long$Taxa <- as.factor(bg_sig_long$Taxa)
p <- ggplot(bg_sig_long, aes(x= Reads))+
geom_density(aes(y = ..scaled.., fill = group, color = group),alpha = .2)+
facet_wrap(~Taxa,scales = "free")+
scale_fill_manual(values=c("blue","brown"))+
scale_color_manual(values=c("blue","brown"))+
ggtitle(desired.sample.name)+
theme(plot.title = element_text(hjust = 0.5))+
theme(legend.title=element_blank(), strip.text.x = element_text(size=5)) + xlab("") + ylab("")
fileN <- paste0("Figures/","block_",blk,"_",desired.sample.name,"_histogram",".eps")
ggsave(fileN, plot = p, width = 10, height = 5, units = "in")
}
library(tidyr)
itera <- 100
burnIn <- 5
cov_pro <- .95
mak_tab <- TRUE # need to change to TRUE if you want to make tables
#psByBlock <- readRDS("./Results/psByBlock2.rds")
gammaPrior_posTrueSing_all_blocks <- readRDS("./Results/gammaPrior_posTrueSing_all_blocks_SIRS.rds")
gammaPrior_all_blks <- gammaPrior_posTrueSing_all_blocks[[1]]
post_all_blocks <- gammaPrior_posTrueSing_all_blocks[[2]]
blk <- 3
taxa_post_all_sam <- post_all_blocks[[blk]]
gammPrior <- gammaPrior_all_blks[[blk]]
sample.names <- sample_names(psPlByBlock[[blk]])
for(j in 1: length(sample.names)){
desired.sample.name <- sample.names[j]
desired.sample.index <- which(sample_names(psPlByBlock[[blk]]) %in% desired.sample.name)
tax_interested <- rownames(sort(otu_table(psPlByBlock[[blk]])[,desired.sample.index],decreasing = TRUE))[c(1:16)]
tax_interested_ind <- which(as.character(taxa_names(psPlByBlock[[blk]])) %in% tax_interested)
tax_names <- taxa_names(psPlByBlock[[blk]])[tax_interested_ind]
#tax_names <- df.ASV$ASV.Genus[which(as.character(df.ASV$ASV.Genus.Species) %in%  tax_names)]
taxa.post <- taxa_post_all_sam[[desired.sample.index]]
burnIn <- 6
signal.hist <- taxa.post[tax_interested_ind]
signal.hist <- lapply(signal.hist,function(x){x[-(1:burnIn),]})
signal.df <- data.frame(do.call("cbind", signal.hist))
colnames(signal.df) <- tax_names
signal.df$group <- rep("True",length=dim(signal.df)[1])
bg <- list()
for(ind in 1:length(tax_interested_ind)){
bg[[ind]] <- rgamma(5000, shape=gammPrior[[desired.sample.index]][[1]][tax_interested_ind[ind]],rate = gammPrior[[desired.sample.index]][[2]][tax_interested_ind[ind]])
}
bg.df <- data.frame(do.call("cbind",bg))
colnames(bg.df) <- tax_names
bg.df$group <- rep("Contaminant",length=dim(bg.df)[1])
bg.signal <- rbind(signal.df, bg.df)
bg.signal$group <- as.factor(bg.signal$group)
bg_sig_long <- tidyr::gather(bg.signal,key="Taxa",value="Reads",1:(dim(bg.signal)[2]-1))
bg_sig_long$Taxa <- as.factor(bg_sig_long$Taxa)
p <- ggplot(bg_sig_long, aes(x= Reads))+
geom_density(aes(y = ..scaled.., fill = group, color = group),alpha = .2)+
facet_wrap(~Taxa,scales = "free")+
scale_fill_manual(values=c("blue","brown"))+
scale_color_manual(values=c("blue","brown"))+
ggtitle(desired.sample.name)+
theme(plot.title = element_text(hjust = 0.5))+
theme(legend.title=element_blank(), strip.text.x = element_text(size=5)) + xlab("") + ylab("")
fileN <- paste0("Figures/","block_",blk,"_",desired.sample.name,"_histogram",".eps")
ggsave(fileN, plot = p, width = 10, height = 5, units = "in")
}
