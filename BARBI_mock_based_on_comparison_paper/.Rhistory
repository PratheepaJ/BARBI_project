#library(BARBI)
library(devtools)
library(phyloseq)
library(DESeq2)
library(dplyr)
library(tidyr)
library(R.utils)
library(BiocParallel)
library(doParallel)
library(parallel)
library(HDInterval)
library(grid)
library(xtable)
library(gtable)
library(gridExtra)
library(BiocStyle)
library(magrittr)
sourceDirectory("./R")
#sourceDirectory("/Users/jpratheepa31/Dropbox/GitHub/BARBI/R")
ncores = as.integer(Sys.getenv("SLURM_NTASKS"))
if(is.na(ncores)) ncores <- parallel::detectCores()
## Load the dataset
load("./Data/mockDilutionsPrep.RData")
mock_ps
contaminants_ps
blank_ps
mock_ps_pure
ps <- merge_phyloseq(blank_ps, mock_ps)
ps
sample_data(ps)$X.SampleID <- sample_names(ps) %>% as.character
#sample_names(ps) <- sample_data(ps)$X.SampleID %>% as.character
sum(otu_table(ps))
if(dim(otu_table(ps))[1]!=ntaxa(ps)){otu_table(ps) <- t(otu_table(ps))}
blocks <- rep("blk1", times = nsamples(ps))
sample_data(ps)$block <- blocks
names(sample_data(ps))[which(names(sample_data(ps))=="Description")] <- "Sample_Type"
ps <- prune_taxa(taxa_sums(ps)>0, ps)
ps_plasma <- subset_samples(ps, Sample_Type %in% c("Mock"))
if(dim(otu_table(ps_plasma))[1]!=ntaxa(ps_plasma)){otu_table(ps_plasma) <- t(otu_table(ps_plasma))}
prevTaxaP <- apply(otu_table(ps_plasma), 1 ,function(x){sum(x>0)})
Contaminants1 <- names(prevTaxaP)[prevTaxaP==0]
ps <- prune_taxa(prevTaxaP > 0, ps)
ps
table(sample_data(ps)$Sample_Type,sample_data(ps)$block)
psBlockResult <- psBlockResults(ps, sampleTypeVar = "Sample_Type", caselevels = c("Mock"), controllevel= "Blank", sampleName = "X.SampleID", blockVar = "block")
psByBlock <- psBlockResult[[1]]
psNCbyBlock <- psBlockResult[[2]]
psallzeroInNC <- psBlockResult[[3]]
psPlByBlock <- psBlockResult[[4]]
saveRDS(psByBlock,"./Results/psByBlock.rds")
alphaBetaNegControl <- lapply(psNCbyBlock, function(x) {
ps.to.dq <- phyloseq_to_deseq2(x, design = ~1)
geo.mean <- function(y) {
if(all(y == 0)){
val <- 0
}else{
val <- exp(sum(log(y[y > 0]))/length(y))
}
return(val)
}
geom.mean.row <- apply(counts(ps.to.dq), 1, FUN = geo.mean)
ps.to.dq <- estimateSizeFactors(ps.to.dq, geoMeans = geom.mean.row)
library.size.norm <- sizeFactors(ps.to.dq)
ot.tab <- t(t(otu_table(x))/library.size.norm)
S_j0 <- round(median(colSums(ot.tab)), digits = 0)
mu_ij_0_all <- as.numeric(otu_table(x)) %>% data.frame
mu_ij_0 <- apply(mu_ij_0_all, 1, function(x){
if(all(is.na(x))){
NA
}else{
median(x, na.rm = T)
}
})
gamma_ij_0 <- rep(1,length(mu_ij_0))
species_name <- taxa_names(x)
sample_mean <- apply(ot.tab, 1, function(y){
if(all(y == 0)){
0
}else{
mean(y[y > 0])
}
})
sample_var <- apply(ot.tab, 1, function(y){
if(all(y == 0)){
0
}else{
var(y)
}
})
disp <- numeric(0)
for(i in 1:length(sample_var)){
disp[i] <- (sample_var[i] - sample_mean[i])/(sample_mean[i])^2
}
alpha_ij_0 <- rep(1e-04, length(mu_ij_0))
beta_ij_0 <- rep(1, length(mu_ij_0))
ind_not_na_of_mu_ij_0 <- which(!is.infinite(mu_ij_0))
#ind_less_one_mu_ij_0 <- which(abs(mu_ij_0) < 1)
alpha_ij_0[ind_not_na_of_mu_ij_0] <- 1/gamma_ij_0[ind_not_na_of_mu_ij_0]
beta_ij_0[ind_not_na_of_mu_ij_0] <- 1/(gamma_ij_0[ind_not_na_of_mu_ij_0] *
mu_ij_0[ind_not_na_of_mu_ij_0])
# alpha_ij_0[ind_less_one_mu_ij_0] <- 1/disp[ind_less_one_mu_ij_0]
#beta_ij_0[ind_less_one_mu_ij_0] <- 1/(gamma_ij_0[ind_less_one_mu_ij_0]*sample_mean[ind_less_one_mu_ij_0])
out <- list(mu_ij_0, gamma_ij_0, S_j0, species_name, sample_mean,
sample_var, alpha_ij_0, beta_ij_0)
names(out) = c("mu_ij_0", "gamma_ij_0", "S_j0", "species_name", "sample_mean",
"sample_var", "alpha_ij_0", "beta_ij_0")
return(out)
})
num_blks <- length(alphaBetaNegControl)
blks <- seq(1, num_blks) %>% as.list
gammaPrior_all_blks <- lapply(blks, function(x){
gammaPrior <- alphaBetaContInPlasma(psPlByBlock = psPlByBlock, psallzeroInNC = psallzeroInNC, blk = x, alphaBetaNegControl=alphaBetaNegControl)
return(gammaPrior)
})
tax_table(ps)
