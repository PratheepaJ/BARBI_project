knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
#library(BARBI)
library(devtools)
library(phyloseq)
library(DESeq2)
library(dplyr)
library(tidyr)
library(R.utils)
library(BiocParallel)
library(doParallel)
library(parallel)
library(HDInterval)
library(grid)
library(xtable)
library(gtable)
library(gridExtra)
library(BiocStyle)
library(magrittr)
library(ggplot2)
sourceDirectory("./R")
#sourceDirectory("/Users/jpratheepa31/Dropbox/GitHub/SIRS_project/Final_Results_For_Manuscript/R")
ncores = as.integer(Sys.getenv("SLURM_NTASKS"))
if(is.na(ncores)) ncores <- parallel::detectCores()
ps <- readRDS(system.file("extdata", "MUClite.rds", package="decontam"))
ps
blocks = rep("Set1", times=nsamples(ps))
sample_data(ps)$block <- blocks
View(sample_data(ps))
View(sample_data(ps) %>% data.frame)
names(sample_data(ps))
ps <- prune_taxa(taxa_sums(ps) > 0, ps)
ps_plasma <- subset_samples(ps, Sample_or_Control %in% c("True Sample"))
prevTaxaP <- apply(otu_table(ps_plasma), 1 ,function(x){sum(x>0)})
Contaminants1 <- names(prevTaxaP)[prevTaxaP==0]
ps <- prune_taxa(prevTaxaP > 0,ps)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
#library(BARBI)
library(devtools)
library(phyloseq)
library(DESeq2)
library(dplyr)
library(tidyr)
library(R.utils)
library(BiocParallel)
library(doParallel)
library(parallel)
library(HDInterval)
library(grid)
library(xtable)
library(gtable)
library(gridExtra)
library(BiocStyle)
library(magrittr)
library(ggplot2)
sourceDirectory("./R")
#sourceDirectory("/Users/jpratheepa31/Dropbox/GitHub/SIRS_project/Final_Results_For_Manuscript/R")
ncores = as.integer(Sys.getenv("SLURM_NTASKS"))
if(is.na(ncores)) ncores <- parallel::detectCores()
ps <- readRDS(system.file("extdata", "MUClite.rds", package="decontam"))
ps
blocks = rep("Set1", times=nsamples(ps))
sample_data(ps)$block <- blocks
ps <- prune_taxa(taxa_sums(ps) > 0, ps)
ps_plasma <- subset_samples(ps, Sample_or_Control %in% c("True Sample"))
ps_plasma
prevTaxaP <- apply(otu_table(ps_plasma), 1 ,function(x){sum(x>0)})
dim(otu_table(ps))
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
#library(BARBI)
library(devtools)
library(phyloseq)
library(DESeq2)
library(dplyr)
library(tidyr)
library(R.utils)
library(BiocParallel)
library(doParallel)
library(parallel)
library(HDInterval)
library(grid)
library(xtable)
library(gtable)
library(gridExtra)
library(BiocStyle)
library(magrittr)
library(ggplot2)
sourceDirectory("./R")
#sourceDirectory("/Users/jpratheepa31/Dropbox/GitHub/SIRS_project/Final_Results_For_Manuscript/R")
ncores = as.integer(Sys.getenv("SLURM_NTASKS"))
if(is.na(ncores)) ncores <- parallel::detectCores()
ps <- readRDS(system.file("extdata", "MUClite.rds", package="decontam"))
if(dim(otu_table(ps))[1]!=ntaxa(ps)){otu_table(ps) <- t(otu_table(ps))}
ps
blocks = rep("Set1", times=nsamples(ps))
sample_data(ps)$block <- blocks
ps <- prune_taxa(taxa_sums(ps) > 0, ps)
ps_plasma <- subset_samples(ps, Sample_or_Control %in% c("True Sample"))
prevTaxaP <- apply(otu_table(ps_plasma), 1 ,function(x){sum(x>0)})
Contaminants1 <- names(prevTaxaP)[prevTaxaP==0]
ps <- prune_taxa(prevTaxaP > 0,ps)
ps
totalReads <- colSums(otu_table(ps))
hist(log(totalReads), yaxs="i", xaxs="i", main="Distribution of total reads per sample", breaks=50)
table(sample_data(ps)$Sample_or_Control, sample_data(ps)$block)
psBlockResult <- psBlockResults(ps, sampleTypeVar = "Sample_or_Control", caselevels = c("True Sample"), controllevel= "Control Sample", sampleName = "X.SampleID", blockVar = "block")
sourceDirectory("./R")
psBlockResult <- psBlockResults(ps, sampleTypeVar = "Sample_or_Control", caselevels = c("True Sample"), controllevel= "Control Sample", sampleName = "X.SampleID", blockVar = "block")
psBlockResult <- psBlockResults(ps, sampleTypeVar = "Sample_or_Control", caselevels = c("True Sample"), controllevel= "Control Sample", sampleName = "X.SampleID", blockVar = "block")
psByBlock <- psBlockResult[[1]]
psNCbyBlock <- psBlockResult[[2]]
psallzeroInNC <- psBlockResult[[3]]
psPlByBlock <- psBlockResult[[4]]
alphaBetaNegControl <- alphaBetaNegControl(psNCbyBlock = psNCbyBlock)
num_blks <- length(alphaBetaNegControl)
blks <- seq(1, num_blks) %>% as.list
gammaPrior_all_blks <- lapply(blks, function(x){
gammaPrior <- alphaBetaContInPlasma(psPlByBlock = psPlByBlock, psallzeroInNC = psallzeroInNC, blk = x, alphaBetaNegControl=alphaBetaNegControl)
return(gammaPrior)
})
t1 <- proc.time()
post_all_blocks <- lapply(blks, function(x){
post_int_all_taxa <- samplingPosterior(psPlByBlock = psPlByBlock,
blk = x,
gammaPrior_Cont = gammaPrior_all_blks[[x]],
itera = 100,
ncores = ncores)
return(post_int_all_taxa)
})
