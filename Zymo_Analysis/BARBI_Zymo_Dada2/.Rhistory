theme_set(theme_bw())
ncores <- as.integer(Sys.getenv("SLURM_NTASKS"))
if(is.na(ncores)) ncores <- parallel::detectCores()
ps <- readRDS("./Data/ps_zymo.rds")
if(dim(otu_table(ps))[1]!=ntaxa(ps)){otu_table(ps) <- t(otu_table(ps))}
ncont <- paste0("NegativeControl.",seq(1,10))
stan <- paste0("Standard.Dilution.1.",c(1,6,36,216,1296,7776,46656,279936))
#stan <- c(paste0("Standard.Dilution.1.",c(1,6,36,216,1296,7776,46656)),"StandardDilution.1.279936")
sample_data(ps)$Name <- factor(sample_data(ps)$Name, levels = c(ncont,stan))
sample_names(ps) <- as.character(sample_data(ps)$Name)
ASV <- as.character(paste0("ASV_",seq(1,ntaxa(ps))))
ASV.Genus <- paste0("ASV_",seq(1,ntaxa(ps)),"_",as.character(tax_table(ps)[,6]))
ASV.Genus.Species <- paste0(ASV,"_",as.character(tax_table(ps)[,6]),"_", as.character(tax_table(ps)[,7]))
df.ASV <- data.frame(seq.variant = taxa_names(ps), ASV = ASV, ASV.Genus = ASV.Genus, ASV.Genus.Species = ASV.Genus.Species)
taxa_names(ps) <- df.ASV$ASV.Genus.Species
Pi <- c(18.58,2.03,14.91,.29,13.68,11.28,14.59,1.46,8.43,10.33,4.42)
Pi <- Pi/100
true.shannon.index <- sum((Pi * log(Pi))*(-1))
true.shannon.index
Pi <- c(18.58,2.03,14.91,.29,13.68,11.28,14.59,1.46,8.43,10.33,4.42)
PiPiminus1 <- Pi*(Pi-1)
NNminus1 <- 100*(100-1)
D <- sum(PiPiminus1)/NNminus1
D
p <- plot_richness(ps, x="SampleType", measures = c("Shannon", "Simpson"), color = "SampleType")
p <- p + geom_text(aes(label = Name), size = 4, hjust = -0.1) + theme_bw()
p
ggsave("./Figures/Zymo_alpha_diversity.eps", plot=p, width = 18, height = 10)
ps.prop <- transform_sample_counts(ps, function(otu) otu/sum(otu))
ord.mds.bray <- ordinate(ps.prop, method="MDS", distance="bray")
evals <- ord.mds.bray$values$Eigenvalues
p <- plot_ordination(ps.prop, ord.mds.bray, color="SampleType", title="Bray MDS")+
geom_text(aes(label = Name), size = 4, hjust = 1) +
theme_bw() +
coord_fixed(sqrt(evals[2] / evals[1])) +
theme(plot.title = element_text(hjust = 0.5))
p
ggsave("./Figures/Zymo_MDS_BC.eps", plot=p, width = 12, height = 8)
top20 <- names(sort(taxa_sums(ps), decreasing=TRUE))[1:20]
ps.top20 <- transform_sample_counts(ps, function(OTU) OTU/sum(OTU))
ps.top20 <- prune_taxa(top20, ps.top20)
p <- plot_bar(ps.top20, x="Name", fill="Genus") + facet_wrap(~SampleType, scales="free_x")
p
ggsave("./Figures/Zymo_barplot_top20.eps", plot=p, width = 12, height = 8)
# true.com.ASV <- taxa_names(ps)[which(tax_table(ps)[,6] %in% c("Bacillus","Listeria","Staphylococcus", "Lactobacillus", "Escherichia/Shigella", "Enterococcus", "Salmonella", "Pseudomonas"))]
true.com.ASV <- taxa_names(ps)[c(2:8,11,17,37,22)]
ps.true <- transform_sample_counts(ps, function(OTU) OTU/sum(OTU))
ps.true <- prune_taxa(true.com.ASV, ps.true)
p <- plot_bar(ps.true, x="Name", fill="Genus") + facet_wrap(~SampleType, scales="free_x")
p
ggsave("./Figures/Zymo_barplot_true.eps", plot=p, width = 12, height = 8)
# con.ASV <- taxa_names(ps)[which(!(tax_table(ps)[,6] %in% c("Bacillus","Listeria","Staphylococcus", "Lactobacillus", "Escherichia/Shigella", "Enterococcus", "Salmonella", "Pseudomonas")))]
con.ASV <- taxa_names(ps)[-c(2:8,11,17,37,22)]
ps.cont <- prune_taxa(con.ASV, ps)
top20.con <- names(sort(taxa_sums(ps.cont), decreasing=TRUE))[1:20]
ps.cont <- transform_sample_counts(ps, function(OTU) OTU/sum(OTU))
ps.cont.top20 <- prune_taxa(top20.con, ps.cont)
p <- plot_bar(ps.cont.top20, x="Name", fill="Genus") + facet_wrap(~SampleType, scales="free_x")
p
ggsave("./Figures/Zymo_barplot_cont_top20.eps", plot=p, width = 12, height = 8)
ps.top <- ps
top <- names(sort(taxa_sums(ps.top), decreasing=TRUE))[1:30]
ps.top <- prune_taxa(top, ps.top)
otu_table(ps.top) <- otu_table(ps.top) +1
p <- plot_heatmap(ps.top, sample.label = "Name", taxa.label="Genus", sample.order = "Name")
p
ggsave("./Figures/heatmap_top.eps", plot = p, width = 12, height = 8)
true.com.ASV <- taxa_names(ps)[c(2:8,11,17,37,22)]
# true.com.ASV <- taxa_names(ps)[which((tax_table(ps)[,6] %in% c("Bacillus","Listeria","Staphylococcus", "Lactobacillus", "Escherichia/Shigella", "Enterococcus", "Salmonella", "Pseudomonas")))]
# true.com.ASV <- taxa_names(ps)[which((tax_table(ps)[,6] %in% c("Bacillus","Listeria","Staphylococcus", "Lactobacillus", "Escherichia/Shigella", "Enterococcus", "Salmonella", "Pseudomonas"))&(!is.na(tax_table(ps)[,7])))]
diluted.sample.names <- sample_names(ps)[3:10]
trueSeq <- function(sample.name, true.com.ASV){
df.sample.i <- data.frame(ot = otu_table(ps)[, sample.name])
names(df.sample.i) <- "ot"
df.sample.i <- mutate(df.sample.i, ASV = rownames(df.sample.i))
df.sample.i.true.seq <- filter(df.sample.i, (ot > 0) & (as.character(ASV) %in% true.com.ASV))
true.seq.sample.i <- as.character(df.sample.i.true.seq$ASV)
return(true.seq.sample.i)
}
true.seq.all.samples <- lapply(diluted.sample.names, FUN = trueSeq, true.com.ASV = true.com.ASV)
true.seq.all.samples
lapply(true.seq.all.samples, function(x) {length(x)})
length(unique(unlist(true.seq.all.samples)))
ps.prop <- transform_sample_counts(ps, function(otu) otu/sum(otu)*100)
ps.true <- prune_taxa(unique(unlist(true.seq.all.samples)), ps)
ps.prop.true <- prune_taxa(taxa_names(ps.true), ps.prop)
dt <- otu_table(subset_samples(ps.prop.true, SampleType == "Standard"))%>% data.frame()
colnames(dt) <- sample_data(subset_samples(ps.prop.true, SampleType == "Standard"))$Name
rownames(dt) <- df.ASV$ASV.Genus[which(as.character(df.ASV$ASV.Genus.Species) %in% rownames(dt))]
library(knitr)
kable(dt)
blocks <- rep("Set1", nsamples(ps))
sample_data(ps)$block <- blocks
ps <- prune_taxa(taxa_sums(ps) > 0, ps)
ps.standard <- subset_samples(ps, SampleType %in% c("Standard"))
prevTaxaP <- apply(otu_table(ps.standard), 1, function(x){sum(x>0)})
Contaminants1 <- names(prevTaxaP)[prevTaxaP == 0]
length(Contaminants1)
ps <- prune_taxa(prevTaxaP > 0, ps)
ps
if(dim(otu_table(ps))[1]!=ntaxa(ps)){otu_table(ps) <- t(otu_table(ps))}
totalReads <- colSums(otu_table(ps))
hist(log(totalReads), yaxs="i", xaxs="i", main="Distribution of total reads per sample", breaks=50)
table(sample_data(ps)$SampleType, sample_data(ps)$block)
colSums(otu_table(ps))
psBlockResult <- psBlockResults(ps, sampleTypeVar = "SampleType", caselevels = c("Standard"), controllevel="Negative", sampleName = "Name", blockVar = "block")
psByBlock <- psBlockResult[[1]]
psNCbyBlock <- psBlockResult[[2]]
psallzeroInNC <- psBlockResult[[3]]
psPlByBlock <- psBlockResult[[4]]
saveRDS(psByBlock,"./Results/psByBlock.rds")
alphaBetaNegControl <- alphaBetaNegControl(psNCbyBlock = psNCbyBlock, stringent = FALSE)
num_blks <- length(alphaBetaNegControl)
blks <- seq(1, num_blks) %>% as.list
gammaPrior_all_blks <- lapply(blks, function(x){
gammaPrior <- alphaBetaContInPlasma(psPlByBlock = psPlByBlock, psallzeroInNC = psallzeroInNC, blk = x, alphaBetaNegControl = alphaBetaNegControl)
return(gammaPrior)
})
plot_heatmap(ps.top, sample.label = "Name", taxa.label="Genus", sample.order = "Name")
plot_heatmap(ps.top, sample.label = "Name", taxa.label="Genus", sample.order = c(ncont,stan))
ps.top <- ps
top <- names(sort(taxa_sums(ps.top), decreasing=TRUE))[1:30]
ps.top <- prune_taxa(top, ps.top)
otu_table(ps.top) <- otu_table(ps.top) +1
p <- plot_heatmap(ps.top, sample.label = "Name", taxa.label="Genus", sample.order = c(ncont,stan))
p
ggsave("./Figures/heatmap_top.eps", plot = p, width = 12, height = 8)
set.seed(10000)
itera <- 100
burnIn <- 5
cov_pro <- .95
mak_tab <- TRUE # need to change to TRUE if you want to make tables
#psByBlock <- readRDS("./Results_BARBI_8_28_18/psByBlock.rds")
num_blks <- length(psByBlock)
gammaPrior_posTrueSing_all_blocks <- readRDS("./Results/gammaPrior_posTrueSing_Zymo_Dada2.rds")
# gammaPrior_posTrueSing_all_blocks is a list that contains first element posterior samples, second element is the samples in negative controls and dilution series samples
#
gammaPrior_all_blks <- gammaPrior_posTrueSing_all_blocks[[1]]
post_all_blocks <- gammaPrior_posTrueSing_all_blocks[[2]]
all_real_taxa_lt <- list()
df_blk <- list()
for(blk in 1:num_blks){
taxa_post_all_sam <- post_all_blocks[[blk]]
gammPrior <- gammaPrior_all_blks[[blk]]
total_summary_table <- NULL
all_real_taxa <- list()
df <- list()
for(sam in 1:nsamples(psPlByBlock[[blk]])){
taxa_post <- taxa_post_all_sam[[sam]]
acceptance <- list() #  acceptance rate of MC sampling
exp_post_s <- list()
lower_s <- list() # s true signal
upper_s <- list()
lower_b <- list() # b- contaminat
upper_b <- list()
all_zero_nc <- list()
for(taxa in 1:length(taxa_post)){
burnIn  <- burnIn
acceptance[[taxa]]  <-  1-mean(duplicated(taxa_post[[taxa]][-(1:burnIn),]))
exp_post_s[[taxa]] <- mean(taxa_post[[taxa]][-(1:burnIn),])
hdi_v <- hdi(taxa_post[[taxa]][-(1:burnIn),], credMass = cov_pro)
lower_s[[taxa]] <- round(hdi_v[1], digits = 0)
upper_s[[taxa]] <- round(hdi_v[2], digits = 0)
b_int <- rgamma((itera-burnIn+1), shape = gammPrior[[sam]][[1]][taxa], rate = gammPrior[[sam]][[2]][taxa])
hdi_b <- hdi(b_int, credMass = cov_pro)
lower_b[[taxa]] <- round(hdi_b[1], digits = 0)
upper_b[[taxa]] <- round(hdi_b[2], digits = 0)
all_zero_nc[[taxa]] <-  gammPrior[[sam]][[5]][taxa]
}
df[[sam]] <- data.frame(Species = taxa_names(psPlByBlock[[blk]]),
xj = as.numeric(gammPrior[[sam]][[3]]),
l_s = unlist(lower_s),
u_s = unlist(upper_s),
l_b = unlist(lower_b),
u_b = unlist(upper_b),
all_zero_nc = unlist(all_zero_nc)
)
df[[sam]] <- arrange(filter(df[[sam]], ((l_s > u_b)&(l_s>0))), desc(xj))
if(dim(df[[sam]])[1]==0){
df[[sam]] <- data.frame(Species="Negative",
xj="Negative",
l_s="Negative",
u_s="Negative",
l_b ="Negative",
u_b="Negative",
all_zero_nc = "Negative")
}
all_real_taxa[[sam]] <- as.character(df[[sam]]$Species)
}
all_real_taxa_lt[[blk]] <- all_real_taxa
df_blk[[blk]] <- df
}
lapply(df, function(x){dim(x)})
#View(df[[1]])
# df2 <- lapply(df, function(x){mutate(x, Genus.spec = df.ASV$Genus.spec[which(as.character(x$Species) %in% as.character(df.ASV$ori.ASV))])})
performance <- lapply(as.list(c(seq(1,8))), function(x){
all(true.seq.all.samples[[x]] %in% as.character(df[[x]]$Species))
})
# all(as.character(df[[3]]$ASV) %in% true.seq.all.samples)
performance
lapply(as.list(c(seq(1,8))), function(x){
dim(df[[x]])[1] - length(df[[x]]$Species[which(df[[x]]$all_zero_nc == "Yes")])
})
true.ASV.all <- lapply(df, function(x){
as.character(x$Species[which(!(x$all_zero_nc == "Yes"))])
})
true.ASV.all <- unlist(true.ASV.all)
true.ASV.all <- unique(true.ASV.all)
true.ASV.all
View(otu_table(ps) %>% data.frame())
View(otu_table(subset_samples(ps,SampleType=="Standard")) %>% data.frame())
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE, fig.width = 15, fig.height = 8)
#library(BARBI)
library(devtools)
library(phyloseq)
library(DESeq2)
library(dplyr)
library(tidyr)
library(R.utils)
library(BiocParallel)
library(doParallel)
library(parallel)
library(HDInterval)
library(grid)
library(xtable)
library(gtable)
library(gridExtra)
library(BiocStyle)
library(magrittr)
library(ggplot2)
sourceDirectory("./R")
theme_set(theme_bw())
ncores <- as.integer(Sys.getenv("SLURM_NTASKS"))
if(is.na(ncores)) ncores <- parallel::detectCores()
ps <- readRDS("./Data/ps_zymo.rds")
if(dim(otu_table(ps))[1]!=ntaxa(ps)){otu_table(ps) <- t(otu_table(ps))}
ncont <- paste0("NegativeControl.",seq(1,10))
stan <- paste0("Standard.Dilution.1.",c(1,6,36,216,1296,7776,46656,279936))
#stan <- c(paste0("Standard.Dilution.1.",c(1,6,36,216,1296,7776,46656)),"StandardDilution.1.279936")
sample_data(ps)$Name <- factor(sample_data(ps)$Name, levels = c(ncont,stan))
sample_names(ps) <- as.character(sample_data(ps)$Name)
ASV <- as.character(paste0("ASV_",seq(1,ntaxa(ps))))
ASV.Genus <- paste0("ASV_",seq(1,ntaxa(ps)),"_",as.character(tax_table(ps)[,6]))
ASV.Genus.Species <- paste0(ASV,"_",as.character(tax_table(ps)[,6]),"_", as.character(tax_table(ps)[,7]))
df.ASV <- data.frame(seq.variant = taxa_names(ps), ASV = ASV, ASV.Genus = ASV.Genus, ASV.Genus.Species = ASV.Genus.Species)
View(df.ASV)
taxa_names(ps) <- df.ASV$ASV.Genus.Species
Pi <- c(18.58,2.03,14.91,.29,13.68,11.28,14.59,1.46,8.43,10.33,4.42)
Pi <- Pi/100
true.shannon.index <- sum((Pi * log(Pi))*(-1))
true.shannon.index
Pi <- c(18.58,2.03,14.91,.29,13.68,11.28,14.59,1.46,8.43,10.33,4.42)
PiPiminus1 <- Pi*(Pi-1)
NNminus1 <- 100*(100-1)
D <- sum(PiPiminus1)/NNminus1
D
p <- plot_richness(ps, x="SampleType", measures = c("Shannon", "Simpson"), color = "SampleType")
p <- p + geom_text(aes(label = Name), size = 4, hjust = -0.1) + theme_bw()
p
ggsave("./Figures/Zymo_alpha_diversity.eps", plot=p, width = 18, height = 10)
ps.prop <- transform_sample_counts(ps, function(otu) otu/sum(otu))
ord.mds.bray <- ordinate(ps.prop, method="MDS", distance="bray")
evals <- ord.mds.bray$values$Eigenvalues
p <- plot_ordination(ps.prop, ord.mds.bray, color="SampleType", title="Bray MDS")+
geom_text(aes(label = Name), size = 4, hjust = 1) +
theme_bw() +
coord_fixed(sqrt(evals[2] / evals[1])) +
theme(plot.title = element_text(hjust = 0.5))
p
ggsave("./Figures/Zymo_MDS_BC.eps", plot=p, width = 12, height = 8)
top20 <- names(sort(taxa_sums(ps), decreasing=TRUE))[1:20]
ps.top20 <- transform_sample_counts(ps, function(OTU) OTU/sum(OTU))
ps.top20 <- prune_taxa(top20, ps.top20)
p <- plot_bar(ps.top20, x="Name", fill="Genus") + facet_wrap(~SampleType, scales="free_x")
p
ggsave("./Figures/Zymo_barplot_top20.eps", plot=p, width = 12, height = 8)
# true.com.ASV <- taxa_names(ps)[which(tax_table(ps)[,6] %in% c("Bacillus","Listeria","Staphylococcus", "Lactobacillus", "Escherichia/Shigella", "Enterococcus", "Salmonella", "Pseudomonas"))]
true.com.ASV <- taxa_names(ps)[c(2:8,11,17,37,22)]
ps.true <- transform_sample_counts(ps, function(OTU) OTU/sum(OTU))
ps.true <- prune_taxa(true.com.ASV, ps.true)
p <- plot_bar(ps.true, x="Name", fill="Genus") + facet_wrap(~SampleType, scales="free_x")
p
ggsave("./Figures/Zymo_barplot_true.eps", plot=p, width = 12, height = 8)
# con.ASV <- taxa_names(ps)[which(!(tax_table(ps)[,6] %in% c("Bacillus","Listeria","Staphylococcus", "Lactobacillus", "Escherichia/Shigella", "Enterococcus", "Salmonella", "Pseudomonas")))]
con.ASV <- taxa_names(ps)[-c(2:8,11,17,37,22)]
ps.cont <- prune_taxa(con.ASV, ps)
top20.con <- names(sort(taxa_sums(ps.cont), decreasing=TRUE))[1:20]
ps.cont <- transform_sample_counts(ps, function(OTU) OTU/sum(OTU))
ps.cont.top20 <- prune_taxa(top20.con, ps.cont)
p <- plot_bar(ps.cont.top20, x="Name", fill="Genus") + facet_wrap(~SampleType, scales="free_x")
p
ggsave("./Figures/Zymo_barplot_cont_top20.eps", plot=p, width = 12, height = 8)
ps.top <- ps
top <- names(sort(taxa_sums(ps.top), decreasing=TRUE))[1:30]
ps.top <- prune_taxa(top, ps.top)
otu_table(ps.top) <- otu_table(ps.top) +1
p <- plot_heatmap(ps.top, sample.label = "Name", taxa.label="Genus", sample.order = c(ncont,stan))
p
ggsave("./Figures/heatmap_top.eps", plot = p, width = 12, height = 8)
true.com.ASV <- taxa_names(ps)[c(2:8,11,17,37,22)]
# true.com.ASV <- taxa_names(ps)[which((tax_table(ps)[,6] %in% c("Bacillus","Listeria","Staphylococcus", "Lactobacillus", "Escherichia/Shigella", "Enterococcus", "Salmonella", "Pseudomonas")))]
# true.com.ASV <- taxa_names(ps)[which((tax_table(ps)[,6] %in% c("Bacillus","Listeria","Staphylococcus", "Lactobacillus", "Escherichia/Shigella", "Enterococcus", "Salmonella", "Pseudomonas"))&(!is.na(tax_table(ps)[,7])))]
diluted.sample.names <- sample_names(ps)[3:10]
trueSeq <- function(sample.name, true.com.ASV){
df.sample.i <- data.frame(ot = otu_table(ps)[, sample.name])
names(df.sample.i) <- "ot"
df.sample.i <- mutate(df.sample.i, ASV = rownames(df.sample.i))
df.sample.i.true.seq <- filter(df.sample.i, (ot > 0) & (as.character(ASV) %in% true.com.ASV))
true.seq.sample.i <- as.character(df.sample.i.true.seq$ASV)
return(true.seq.sample.i)
}
true.seq.all.samples <- lapply(diluted.sample.names, FUN = trueSeq, true.com.ASV = true.com.ASV)
true.seq.all.samples
lapply(true.seq.all.samples, function(x) {length(x)})
length(unique(unlist(true.seq.all.samples)))
ps.prop <- transform_sample_counts(ps, function(otu) otu/sum(otu)*100)
ps.true <- prune_taxa(unique(unlist(true.seq.all.samples)), ps)
ps.prop.true <- prune_taxa(taxa_names(ps.true), ps.prop)
dt <- otu_table(subset_samples(ps.prop.true, SampleType == "Standard"))%>% data.frame()
colnames(dt) <- sample_data(subset_samples(ps.prop.true, SampleType == "Standard"))$Name
rownames(dt) <- df.ASV$ASV.Genus[which(as.character(df.ASV$ASV.Genus.Species) %in% rownames(dt))]
library(knitr)
kable(dt)
blocks <- rep("Set1", nsamples(ps))
sample_data(ps)$block <- blocks
ps <- prune_taxa(taxa_sums(ps) > 0, ps)
ps.standard <- subset_samples(ps, SampleType %in% c("Standard"))
prevTaxaP <- apply(otu_table(ps.standard), 1, function(x){sum(x>0)})
Contaminants1 <- names(prevTaxaP)[prevTaxaP == 0]
length(Contaminants1)
ps <- prune_taxa(prevTaxaP > 0, ps)
ps
if(dim(otu_table(ps))[1]!=ntaxa(ps)){otu_table(ps) <- t(otu_table(ps))}
totalReads <- colSums(otu_table(ps))
hist(log(totalReads), yaxs="i", xaxs="i", main="Distribution of total reads per sample", breaks=50)
table(sample_data(ps)$SampleType, sample_data(ps)$block)
colSums(otu_table(ps))
psBlockResult <- psBlockResults(ps, sampleTypeVar = "SampleType", caselevels = c("Standard"), controllevel="Negative", sampleName = "Name", blockVar = "block")
psByBlock <- psBlockResult[[1]]
psNCbyBlock <- psBlockResult[[2]]
psallzeroInNC <- psBlockResult[[3]]
psPlByBlock <- psBlockResult[[4]]
saveRDS(psByBlock,"./Results/psByBlock.rds")
alphaBetaNegControl <- alphaBetaNegControl(psNCbyBlock = psNCbyBlock, stringent = FALSE)
num_blks <- length(alphaBetaNegControl)
blks <- seq(1, num_blks) %>% as.list
gammaPrior_all_blks <- lapply(blks, function(x){
gammaPrior <- alphaBetaContInPlasma(psPlByBlock = psPlByBlock, psallzeroInNC = psallzeroInNC, blk = x, alphaBetaNegControl = alphaBetaNegControl)
return(gammaPrior)
})
set.seed(10000)
itera <- 100
burnIn <- 5
cov_pro <- .95
mak_tab <- TRUE # need to change to TRUE if you want to make tables
#psByBlock <- readRDS("./Results_BARBI_8_28_18/psByBlock.rds")
num_blks <- length(psByBlock)
gammaPrior_posTrueSing_all_blocks <- readRDS("./Results/gammaPrior_posTrueSing_Zymo_Dada2.rds")
# gammaPrior_posTrueSing_all_blocks is a list that contains first element posterior samples, second element is the samples in negative controls and dilution series samples
#
gammaPrior_all_blks <- gammaPrior_posTrueSing_all_blocks[[1]]
post_all_blocks <- gammaPrior_posTrueSing_all_blocks[[2]]
all_real_taxa_lt <- list()
df_blk <- list()
for(blk in 1:num_blks){
taxa_post_all_sam <- post_all_blocks[[blk]]
gammPrior <- gammaPrior_all_blks[[blk]]
total_summary_table <- NULL
all_real_taxa <- list()
df <- list()
for(sam in 1:nsamples(psPlByBlock[[blk]])){
taxa_post <- taxa_post_all_sam[[sam]]
acceptance <- list() #  acceptance rate of MC sampling
exp_post_s <- list()
lower_s <- list() # s true signal
upper_s <- list()
lower_b <- list() # b- contaminat
upper_b <- list()
all_zero_nc <- list()
for(taxa in 1:length(taxa_post)){
burnIn  <- burnIn
acceptance[[taxa]]  <-  1-mean(duplicated(taxa_post[[taxa]][-(1:burnIn),]))
exp_post_s[[taxa]] <- mean(taxa_post[[taxa]][-(1:burnIn),])
hdi_v <- hdi(taxa_post[[taxa]][-(1:burnIn),], credMass = cov_pro)
lower_s[[taxa]] <- round(hdi_v[1], digits = 0)
upper_s[[taxa]] <- round(hdi_v[2], digits = 0)
b_int <- rgamma((itera-burnIn+1), shape = gammPrior[[sam]][[1]][taxa], rate = gammPrior[[sam]][[2]][taxa])
hdi_b <- hdi(b_int, credMass = cov_pro)
lower_b[[taxa]] <- round(hdi_b[1], digits = 0)
upper_b[[taxa]] <- round(hdi_b[2], digits = 0)
all_zero_nc[[taxa]] <-  gammPrior[[sam]][[5]][taxa]
}
df[[sam]] <- data.frame(Species = taxa_names(psPlByBlock[[blk]]),
xj = as.numeric(gammPrior[[sam]][[3]]),
l_s = unlist(lower_s),
u_s = unlist(upper_s),
l_b = unlist(lower_b),
u_b = unlist(upper_b),
all_zero_nc = unlist(all_zero_nc)
)
df[[sam]] <- arrange(filter(df[[sam]], ((l_s > u_b)&(l_s>0))), desc(xj))
if(dim(df[[sam]])[1]==0){
df[[sam]] <- data.frame(Species="Negative",
xj="Negative",
l_s="Negative",
u_s="Negative",
l_b ="Negative",
u_b="Negative",
all_zero_nc = "Negative")
}
all_real_taxa[[sam]] <- as.character(df[[sam]]$Species)
}
all_real_taxa_lt[[blk]] <- all_real_taxa
df_blk[[blk]] <- df
}
df
lapply(df, function(x){dim(x)})
#View(df[[1]])
# df2 <- lapply(df, function(x){mutate(x, Genus.spec = df.ASV$Genus.spec[which(as.character(x$Species) %in% as.character(df.ASV$ori.ASV))])})
View(df2[[8]])
View(df[[8]])
performance <- lapply(as.list(c(seq(1,8))), function(x){
all(true.seq.all.samples[[x]] %in% as.character(df[[x]]$Species))
})
# all(as.character(df[[3]]$ASV) %in% true.seq.all.samples)
performance
lapply(as.list(c(seq(1,8))), function(x){
dim(df[[x]])[1] - length(df[[x]]$Species[which(df[[x]]$all_zero_nc == "Yes")])
})
View(df[[2]])
View(df[[3]])
View(df[[6]])
performance <- lapply(as.list(c(seq(1,8))), function(x){
all(true.seq.all.samples[[x]] %in% as.character(df[[x]]$Species))
})
# all(as.character(df[[3]]$ASV) %in% true.seq.all.samples)
performance
lapply(as.list(c(seq(1,8))), function(x){
dim(df[[x]])[1] - length(df[[x]]$Species[which(df[[x]]$all_zero_nc == "Yes")])
})
true.ASV.all <- lapply(df, function(x){
as.character(x$Species[which(!(x$all_zero_nc == "Yes"))])
})
true.ASV.all <- unlist(true.ASV.all)
true.ASV.all <- unique(true.ASV.all)
true.ASV.all
ps.true <- prune_taxa(true.ASV.all,ps)
ps.true
kable(otu_table(subset_samples(ps.true,SampleType=="Standard")) %>% data.frame())
View(otu_table(subset_samples(ps.true,SampleType=="Standard")) %>% data.frame())
ot <- otu_table(ps.top) %>% data.frame %>% as.matrix
geo_mean <- function(x) {
if(all(x == 0)){
val <- 0
}else{
val <- exp(sum(log(x[x > 0]))/length(x))
}
return(val)
}
geom_mean_row <- apply(ot, 1, FUN = geo_mean)
sj <- estimateSizeFactorsForMatrix(ot, median, geoMeans = geom_mean_row)
sj
ot.trans <- t(asinh(t(ot)/sj))
dim(ot.trans)
ps
ps.top <- ps
top <- names(sort(taxa_sums(ps.top), decreasing=TRUE))[1:30]
ot <- otu_table(ps.top) %>% data.frame %>% as.matrix
geo_mean <- function(x) {
if(all(x == 0)){
val <- 0
}else{
val <- exp(sum(log(x[x > 0]))/length(x))
}
return(val)
}
geom_mean_row <- apply(ot, 1, FUN = geo_mean)
sj <- estimateSizeFactorsForMatrix(ot, median, geoMeans = geom_mean_row)
ot.trans <- t(asinh(t(ot)/sj))
ps.top <- phyloseq(otu_table(ot.trans), sample_data(ps.top), tax_table(ps.top))
dim(ot.trans)
ps.top <- phyloseq(otu_table(ot.trans, taxa_are_rows = TRUE), sample_data(ps.top), tax_table(ps.top))
ps.top <- prune_taxa(top, ps.top)
otu_table(ps.top) <- otu_table(ps.top) +1
p <- plot_heatmap(ps.top, sample.label = "Name", taxa.label="Genus", sample.order = c(ncont,stan))
p <- plot_heatmap(ps.top, sample.label = "Name", taxa.label="Genus", sample.order = c(ncont,stan))
p
p + guides(fill = guide_legend(title="asinh trasnformed abudnace"))
p + guides(fill = guide_legend(title="asinh trans abundance"))
p + guides(fill = guide_legend(title="asinh trans abundance"))
ggsave("./Figures/heatmap_top.eps", plot = p, width = 12, height = 8)
ps.top <- ps
top <- names(sort(taxa_sums(ps.top), decreasing=TRUE))[1:30]
ot <- otu_table(ps.top) %>% data.frame %>% as.matrix
geo_mean <- function(x) {
if(all(x == 0)){
val <- 0
}else{
val <- exp(sum(log(x[x > 0]))/length(x))
}
return(val)
}
geom_mean_row <- apply(ot, 1, FUN = geo_mean)
sj <- estimateSizeFactorsForMatrix(ot, median, geoMeans = geom_mean_row)
ot.trans <- t(asinh(t(ot)/sj))
ps.top <- phyloseq(otu_table(ot.trans, taxa_are_rows = TRUE), sample_data(ps.top), tax_table(ps.top))
ps.top <- prune_taxa(top, ps.top)
otu_table(ps.top) <- otu_table(ps.top) +1
p <- plot_heatmap(ps.top, sample.label = "Name", taxa.label="Genus", sample.order = c(ncont,stan))
p <- p + guides(fill = guide_legend(title="asinh trans abundance"))
p
ggsave("./Figures/heatmap_top.eps", plot = p, width = 12, height = 8)
