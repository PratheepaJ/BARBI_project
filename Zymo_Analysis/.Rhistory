df[[sam]] <- data.frame(Species = taxa_names(psPlByBlock[[blk]]),
xj = as.numeric(gammPrior[[sam]][[3]]),
l_s = unlist(lower_s),
u_s = unlist(upper_s),
l_b = unlist(lower_b),
u_b = unlist(upper_b),
all_zero_nc = unlist(all_zero_nc)
)
df[[sam]] <- arrange(filter(df[[sam]], ((l_s > u_b)&(l_s>0))), desc(xj))
if(dim(df[[sam]])[1]==0){
df[[sam]] <- data.frame(Species="Negative",
xj="Negative",
l_s="Negative",
u_s="Negative",
l_b ="Negative",
u_b="Negative",
all_zero_nc = "Negative")
}
all_real_taxa[[sam]] <- as.character(df[[sam]]$Species)
}
all_real_taxa_lt[[blk]] <- all_real_taxa
df_blk[[blk]] <- df
}
#number of not contaminant ASVs found by BARBI in each sample
lapply(all_real_taxa_lt[[1]], function(y){
length(y)
})
all_real_taxa_lt
df_blk
sample_names(psPlByBlock[[1]])
true.asvs
View(data.frame(otu_table(psPlByBlock[[1]])))
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
library(phyloseq)
library(dplyr)
library(magrittr)
asv.tab <- read.csv("/Users/jpratheepa31/Dropbox/GitHub/BARBI_project/Re__Result_for_Metagenomic_Data_from_Serial_dilutions_of_Zymo_Mock_Community/in1299.190122.zymo/00.AllSamples.Bac16Sv34/Dada2/abundance.table.csv")
asvs <- colnames(asv.tab)
sam.names <- asv.tab[,1]
asv.tab <- select(asv.tab, -seqs)
rownames(asv.tab) <- sam.names
class(asv.tab)
asv.tab <- asv.tab %>% t
true.asvs <- names(sort(asv.tab[,"Standard.Dilution.1.1"], decreasing = TRUE))[1:11]
sam.tab <- data.frame(SubjectID = colnames(asv.tab), SampleID = colnames(asv.tab))
sam.tab <- mutate(sam.tab, SampleType  = substr(SampleID, 1,8))
rownames(sam.tab) <- as.character(sam.tab$SampleID)
ps <- phyloseq(otu_table(asv.tab, taxa_are_rows = TRUE), sample_data(sam.tab))
#library(BARBI)
library(devtools)
library(phyloseq)
library(DESeq2)
library(dplyr)
library(tidyr)
library(R.utils)
library(BiocParallel)
library(doParallel)
library(parallel)
library(HDInterval)
library(grid)
library(xtable)
library(gtable)
library(gridExtra)
library(BiocStyle)
library(magrittr)
#sourceDirectory("./R")
sourceDirectory("/Users/jpratheepa31/Dropbox/GitHub/BARBI/R")
ncores <- as.integer(Sys.getenv("SLURM_NTASKS"))
if(is.na(ncores)) ncores <- parallel::detectCores()
ps <- ps
blocks <- rep("Set1", nsamples(ps))
sample_data(ps)$block <- blocks
ps <- prune_taxa(taxa_sums(ps)>0, ps)
ps.standard <- subset_samples(ps, SampleType %in% c("Standard"))
prevTaxaP <- apply(otu_table(ps.standard), 1, function(x){sum(x>0)})
Contaminants1 <- names(prevTaxaP)[prevTaxaP == 0]
length(Contaminants1)
ps <- prune_taxa(prevTaxaP>0, ps)
ps
if(dim(otu_table(ps))[1]!=ntaxa(ps)){otu_table(ps) <- t(otu_table(ps))}
totalReads <- colSums(otu_table(ps))
hist(log(totalReads), yaxs="i", xaxs="i", main="Distribution of total reads per sample", breaks=50)
table(sample_data(ps)$SampleType,sample_data(ps)$block)
psBlockResult <- psBlockResults(ps, sampleTypeVar = "SampleType", caselevels = c("Standard"), controllevel="Negative", sampleName = "SampleID", blockVar = "block")
knitr::opts_chunk$set(echo = TRUE)
library(dada2); packageVersion("dada2")
pkgs <- c("DADA2")
BiocManager::install(setdiff(pkgs, installed.packages()), update = TRUE)
library(dada2); packageVersion("dada2")
pkgs <- c("dada2")
BiocManager::install(setdiff(pkgs, installed.packages()), update = TRUE)
library(dada2); packageVersion("dada2")
getwd()
setwd("/Users/jpratheepa31/Dropbox/GitHub/BARBI_project/Zymo_raw_read_analysis")
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
path <- "RawSeq"
list.files(path)
# Forward and reverse fastq filenames have format: SAMPLENAME_R1_001.fastq and SAMPLENAME_R2_001.fastq
fnFs <- sort(list.files(path, pattern="_R1.fastq", full.names = TRUE))
fnRs <- sort(list.files(path, pattern="_R2.fastq", full.names = TRUE))
fnFs
fnRs
sapply(strsplit(basename(fnFs), "_"), `[`, 1)
basename(fnFs)
strsplit(basename(fnFs), "_")
sub("^[a-zA-Z0-9_.-]*$",".",basename(fnFs))
sub("^[a-zA-Z0-9]*$", ".", basename(fnFs))
sub("^[a-zA-Z0-9\\_]*$", ".", basename(fnFs))
sub("^[a-zA-Z0-9_]*$", ".", basename(fnFs))
sub("^[a-z0-9_]$", ".", basename(fnFs))
sub("^[a-z0-9]\\_$", ".", basename(fnFs))
sub("^*\\_$", ".", basename(fnFs))
sub('(^[^_]+_[^_]+)_(.*)$', '\\1 \\2',, basename(fnFs))
sub('(^[^_]+_[^_]+)_(.*)$', '\\1 \\2', basename(fnFs))
sub('(^[^_]+_[^_]+)$', '\\1 \\2', basename(fnFs))
sub('(^[^_]+_[^_]+)_(.*)$', '\\1 \\2', basename(fnFs))
sub('(^[^_]+_[^_]+)_(.*)$', '\\1 \\2', "in1299_1_R1.fastq")
sub('(^[^_]+_[^_]+)_(.*)$', '\\1 \\2', "in1299_1_R1.fastq")[1]
sapply(strsplit(basename(fnFs), "_"), `[`, 1)
sample.names <- sapply(strsplit(sub('(^[^_]+_[^_]+)_(.*)$', '\\1 \\2', basename(fnFs)), "_"), `[`, 1)
sample.names
sapply(strsplit(sub('(^[^_]+_[^_]+)_(.*)$', '\\1 \\2', basename(fnFs)), " "), `[`, 1)
sub("^[a-z0-9]_",".", "in1299_1")
sub("^[a-z0-9]_$",".", "in1299_1")
gsub("\\_", ".", sample.names)
sample.names
gsub("[_]", ".", sample.names)
sample.names <- sapply(strsplit(sub('(^[^_]+_[^_]+)_(.*)$', '\\1 \\2', basename(fnFs)), " "), `[`, 1)
sample.names
gsub("[_]", ".", sample.names)
gsub("\\_", ".", sample.names)
sample.names <- gsub("\\_", ".", sample.names)
plotQualityProfile(fnFs[1:2])
plotQualityProfile(fnFs[c(1,18)])
plotQualityProfile(fnFs[c(1,3)])
plotQualityProfile(fnRs[c(1,3)])
plotQualityProfile(fnFs[c(2,3)])
filtFs <- file.path(path, "filtered", paste0(sample.names, "_F_filt.fastq.gz"))
filtRs <- file.path(path, "filtered", paste0(sample.names, "_R_filt.fastq.gz"))
out <- filterAndTrim(fnFs, filtFs, fnRs, filtRs, truncLen=c(300,250),
maxN=0, maxEE=c(2,2), truncQ=2, rm.phix=TRUE,
compress=TRUE, multithread=TRUE) # On Windows set multithread=FALSE
head(out)
out <- filterAndTrim(fnFs, filtFs, fnRs, filtRs,
maxN=0, maxEE=c(2,2), truncQ=2, rm.phix=TRUE,
compress=TRUE, multithread=TRUE) # On Windows set multithread=FALSE
out <- filterAndTrim(fnFs, filtFs, fnRs, filtRs,
maxN=0, maxEE=c(2,2), truncQ=2, rm.phix=TRUE,
compress=TRUE, multithread=TRUE) # On Windows set multithread=FALSE
head(out)
out <- filterAndTrim(fnFs, filtFs, fnRs, filtRs, truncLen=c(300,250),
maxN=0, maxEE=c(2,5), truncQ=2, rm.phix=TRUE,
compress=TRUE, multithread=TRUE) # On Windows set multithread=FALSE
head(out)
out <- filterAndTrim(fnFs, filtFs, fnRs, filtRs, truncLen=c(300,200),
maxN=0, maxEE=c(2,5), truncQ=2, rm.phix=TRUE,
compress=TRUE, multithread=TRUE) # On Windows set multithread=FALSE
head(out)
errF <- learnErrors(filtFs, multithread=TRUE)
plotErrors(errF, nominalQ=TRUE)
system.time(errR <- learnErrors(filtRs, multithread=TRUE))
plotErrors(errR, nominalQ=TRUE)
plotErrors(errR, nominalQ=TRUE)
t1 <- proc.time()
derepFs <- derepFastq(filtFs, verbose=TRUE)
derepRs <- derepFastq(filtRs, verbose=TRUE)
# Name the derep-class objects by the sample names
names(derepFs) <- sample.names
names(derepRs) <- sample.names
proc.time() - t1
names(derepFs)
system.time(dadaFs <- dada(derepFs, err=errF, multithread=TRUE))
system.time(dadaRs <- dada(derepRs, err=errR, multithread=TRUE))
dadaFs[[1]]
dadaRs[[1]]
sample.names
dadaFs[[2]]
dadaFs[[3e]]
dadaFs[[3]]
dadaFs[[1]]
mergers <- mergePairs(dadaFs, derepFs, dadaRs, derepRs, verbose=TRUE)
# Inspect the merger data.frame from the first sample
head(mergers[[1]])
head(mergers[[1]])
seqtab <- makeSequenceTable(mergers)
dim(seqtab)
# Inspect distribution of sequence lengths
table(nchar(getSequences(seqtab)))
seqtab.nochim <- removeBimeraDenovo(seqtab, method="consensus", multithread=TRUE, verbose=TRUE)
dim(seqtab.nochim)
sum(seqtab.nochim)/sum(seqtab)
1-.65
getN <- function(x) sum(getUniques(x))
track <- cbind(out, sapply(dadaFs, getN), sapply(dadaRs, getN), sapply(mergers, getN), rowSums(seqtab.nochim))
# If processing a single sample, remove the sapply calls: e.g. replace sapply(dadaFs, getN) with getN(dadaFs)
colnames(track) <- c("input", "filtered", "denoisedF", "denoisedR", "merged", "nonchim")
rownames(track) <- sample.names
head(track)
taxa <- assignTaxonomy(seqtab.nochim, "~/tax/silva_nr_v128_train_set.fa.gz", multithread=TRUE)
taxa <- assignTaxonomy(seqtab.nochim, "./silva_nr_v128_train_set.fa.gz", multithread=TRUE)
library(phyloseq); packageVersion("phyloseq")
library(ggplot2); packageVersion("ggplot2")
theme_set(theme_bw())
samples.out <- rownames(seqtab.nochim)
samples.out
substr(samples.out, 8,9)
sampleID <- substr(samples.out, 8,9)
SampleType <- ifelse(sampleID %in% as.character(seq(1,10)), "Negative", "Standard")
SampleType
samdf <- data.frame(SubjectID = samples.out, sampleID = samples.out, SampleType = SampleType)
rownames(samdf) <- samples.out
ps <- phyloseq(otu_table(seqtab.nochim, taxa_are_rows=FALSE),
sample_data(samdf),
tax_table(taxa))
ps
View(data.frame(otu_table(ps)))
plot_richness(ps, x="SampleType", measures=c("Shannon", "Simpson"), color="When")
plot_richness(ps, x="SampleType", measures=c("Shannon", "Simpson"), color="SampleType")
ps.prop <- transform_sample_counts(ps, function(otu) otu/sum(otu))
ord.nmds.bray <- ordinate(ps.prop, method="NMDS", distance="bray")
plot_ordination(ps.prop, ord.nmds.bray, color="SampleType", title="Bray NMDS")
plot_ordination(ps.prop, ord.nmds.bray, color="SampleType", title="Bray NMDS", label = "sampleID")
top20 <- names(sort(taxa_sums(ps), decreasing=TRUE))[1:20]
ps.top20 <- transform_sample_counts(ps, function(OTU) OTU/sum(OTU))
ps.top20 <- prune_taxa(top20, ps.top20)
plot_bar(ps.top20, x="Day", fill="Family") + facet_wrap(~SampleType, scales="free_x")
top20 <- names(sort(taxa_sums(ps), decreasing=TRUE))[1:20]
ps.top20 <- transform_sample_counts(ps, function(OTU) OTU/sum(OTU))
ps.top20 <- prune_taxa(top20, ps.top20)
plot_bar(ps.top20, x="SampleType", fill="Family") + facet_wrap(~SampleType, scales="free_x")
top20 <- names(sort(taxa_sums(ps), decreasing=TRUE))[1:20]
ps.top20 <- transform_sample_counts(ps, function(OTU) OTU/sum(OTU))
ps.top20 <- prune_taxa(top20, ps.top20)
plot_bar(ps.top20, x="SampleType", fill="Genus") + facet_wrap(~SampleType, scales="free_x")
top20 <- names(sort(taxa_sums(ps), decreasing=TRUE))[1:50]
ps.top20 <- transform_sample_counts(ps, function(OTU) OTU/sum(OTU))
ps.top20 <- prune_taxa(top20, ps.top20)
plot_bar(ps.top20, x="SampleType", fill="Genus") + facet_wrap(~SampleType, scales="free_x")
top20 <- names(sort(taxa_sums(ps), decreasing=TRUE))[1:30]
ps.top20 <- transform_sample_counts(ps, function(OTU) OTU/sum(OTU))
ps.top20 <- prune_taxa(top20, ps.top20)
plot_bar(ps.top20, x="SampleType", fill="Genus") + facet_wrap(~SampleType, scales="free_x")
top20 <- names(sort(taxa_sums(ps), decreasing=TRUE))[1:30]
ps.top20 <- transform_sample_counts(ps, function(OTU) OTU/sum(OTU))
ps.top20 <- prune_taxa(top20, ps.top20)
plot_bar(ps.top20, x="sampleID", fill="Genus") + facet_wrap(~SampleType, scales="free_x")
length(unique(tax_table(ps.top20)[,"Genus"]))
table(tax_table(ps.top20)[,"Genus"])
saveRDS("./Data/ps_zymo.rds")
getwd()
saveRDS(ps, "./Data/ps_zymo.rds")
samples.out
readxl::read_excel("./Data/mappingTable.xlsx")
old.new.sampleID <- readxl::read_excel("./Data/mappingTable.xlsx")
old.new.sampleID
old.new.sampleID <- readxl::read_excel("./Data/mappingTable.xlsx") %>% data.frame
magrittr
library(magrittr)
old.new.sampleID <- readxl::read_excel("./Data/mappingTable.xlsx") %>% data.frame
old.new.sampleID
library(readxl)
old.new.sampleID <- readxl::read_excel("./Data/mappingTable.xlsx", col_names = FALSE) %>% data.frame
old.new.sampleID
colnames(old.new.sampleID) <- c("SubjectID","Name")
samdf <- data.frame(SubjectID = samples.out, sampleID = samples.out, SampleType = SampleType)
library(dplyr)
samdf <- left_join(samdf, old.new.sampleID, by = "SubjectID")
View(samdf)
old.new.sampleID <- readxl::read_excel("./Data/mappingTable.xlsx", col_names = FALSE) %>% data.frame
colnames(old.new.sampleID) <- c("SubjectID", "Name")
samdf <- data.frame(SubjectID = samples.out, sampleID = samples.out, SampleType = SampleType)
View(old.new.sampleID)
gsub("\\_", ".", old.new.sampleID$SubjectID)
samples.out <- rownames(seqtab.nochim)
sampleID <- substr(samples.out, 8,9)
SampleType <- ifelse(sampleID %in% as.character(seq(1,10)), "Negative", "Standard")
old.new.sampleID <- readxl::read_excel("./Data/mappingTable.xlsx", col_names = FALSE) %>% data.frame
colnames(old.new.sampleID) <- c("SubjectID", "Name")
old.new.sampleID$SubjectID <- gsub("\\_", ".", old.new.sampleID$SubjectID)
samdf <- data.frame(SubjectID = samples.out, sampleID = samples.out, SampleType = SampleType)
samdf <- left_join(samdf, old.new.sampleID, by = "SubjectID")
rownames(samdf) <- samples.out
View(samdf)
ps <- phyloseq(otu_table(seqtab.nochim, taxa_are_rows=FALSE),
sample_data(samdf),
tax_table(taxa))
ps
saveRDS(ps, "./Data/ps_zymo.rds")
plot_richness(ps, x="SampleType", measures=c("Shannon", "Simpson"), color="SampleType")
ps.prop <- transform_sample_counts(ps, function(otu) otu/sum(otu))
ord.nmds.bray <- ordinate(ps.prop, method="NMDS", distance="bray")
plot_ordination(ps.prop, ord.nmds.bray, color="SampleType", title="Bray NMDS", label = "Name")
top20 <- names(sort(taxa_sums(ps), decreasing=TRUE))[1:30]
ps.top20 <- transform_sample_counts(ps, function(OTU) OTU/sum(OTU))
ps.top20 <- prune_taxa(top20, ps.top20)
plot_bar(ps.top20, x="sampleID", fill="Genus") + facet_wrap(~SampleType, scales="free_x")
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
pkgs <- c("dada2", "magrittr", "dplyr")
BiocManager::install(setdiff(pkgs, installed.packages()), update = TRUE)
library(dada2); packageVersion("dada2")
library(magrittr)
library(dplyr)
path <- "RawSeq"
list.files(path)
# Forward and reverse fastq filenames have format: SAMPLENAME_R1_001.fastq and SAMPLENAME_R2_001.fastq
fnFs <- sort(list.files(path, pattern="_R1.fastq", full.names = TRUE))
fnRs <- sort(list.files(path, pattern="_R2.fastq", full.names = TRUE))
# Extract sample names, assuming filenames have format: SAMPLENAME_XXX.fastq
sample.names <- sapply(strsplit(sub('(^[^_]+_[^_]+)_(.*)$', '\\1 \\2', basename(fnFs)), " "), `[`, 1)
sample.names <- gsub("\\_", ".", sample.names)
plotQualityProfile(fnFs[c(2,3)])
plotQualityProfile(fnRs[c(1,3)])
filtFs <- file.path(path, "filtered", paste0(sample.names, "_F_filt.fastq.gz"))
filtRs <- file.path(path, "filtered", paste0(sample.names, "_R_filt.fastq.gz"))
out <- filterAndTrim(fnFs, filtFs, fnRs, filtRs, truncLen=c(300,200),
maxN=0, maxEE=c(2,2), truncQ=2, rm.phix=TRUE,
compress=TRUE, multithread=TRUE) # On Windows set multithread=FALSE
head(out)
errF <- learnErrors(filtFs, multithread=TRUE)
plotErrors(errF, nominalQ=TRUE)
system.time(errR <- learnErrors(filtRs, multithread=TRUE))
plotErrors(errR, nominalQ=TRUE)
t1 <- proc.time()
derepFs <- derepFastq(filtFs, verbose=TRUE)
derepRs <- derepFastq(filtRs, verbose=TRUE)
# Name the derep-class objects by the sample names
names(derepFs) <- sample.names
names(derepRs) <- sample.names
proc.time() - t1
system.time(dadaFs <- dada(derepFs, err=errF, multithread=TRUE))
system.time(dadaRs <- dada(derepRs, err=errR, multithread=TRUE))
dadaFs[[1]]
dadaRs[[1]]
mergers <- mergePairs(dadaFs, derepFs, dadaRs, derepRs, verbose=TRUE)
# Inspect the merger data.frame from the first sample
head(mergers[[1]])
head(mergers[[1]])
rm(list = c("dadaFs", "dadaRs", "derepFs", "derepRs"))
seqtab <- makeSequenceTable(mergers)
dim(seqtab)
# Inspect distribution of sequence lengths
table(nchar(getSequences(seqtab)))
seqtab.nochim <- removeBimeraDenovo(seqtab, method="consensus", multithread=TRUE, verbose=TRUE)
dim(seqtab.nochim)
sum(seqtab.nochim)/sum(seqtab)
getN <- function(x) sum(getUniques(x))
track <- cbind(out, sapply(dadaFs, getN), sapply(dadaRs, getN), sapply(mergers, getN), rowSums(seqtab.nochim))
taxa <- assignTaxonomy(seqtab.nochim, "./silva_nr_v128_train_set.fa.gz", multithread=TRUE)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
library(dada2); packageVersion("dada2")
library(magrittr)
library(dplyr)
path <- "RawSeq"
list.files(path)
# Forward and reverse fastq filenames have format: SAMPLENAME_R1_001.fastq and SAMPLENAME_R2_001.fastq
fnFs <- sort(list.files(path, pattern="_R1.fastq", full.names = TRUE))
fnRs <- sort(list.files(path, pattern="_R2.fastq", full.names = TRUE))
# Extract sample names, assuming filenames have format: SAMPLENAME_XXX.fastq
sample.names <- sapply(strsplit(sub('(^[^_]+_[^_]+)_(.*)$', '\\1 \\2', basename(fnFs)), " "), `[`, 1)
sample.names <- gsub("\\_", ".", sample.names)
plotQualityProfile(fnFs[c(2,3)])
plotQualityProfile(fnRs[c(1,3)])
filtFs <- file.path(path, "filtered", paste0(sample.names, "_F_filt.fastq.gz"))
filtRs <- file.path(path, "filtered", paste0(sample.names, "_R_filt.fastq.gz"))
p <- plotQualityProfile(fnRs[c(1,3)])
class(p)
p$data
View(p$data)
dim(p$data)
plotQualityProfile(fnRs[c(1,3)])
ps <- readRDS("./Data/ps_zymo_1.rds")
View(data.frame(tax_table(ps)))
ps
tax_table(ps)[, 7]
View(data.frame(tax_table(ps)))
tax_table(ps)[1:10,1"7"]
tax_table(ps)[1:10,1:7]
View(tax_table(ps)[1:10,1:7])
View(tax_table(ps)[1:10,1:7] %>% data.frame)
tx <- data.frame(tax_table(ps))
tx <- as.data.frame(tax_table(ps))
tx <- tax_table(ps)
class(tx)
rownames(tx) <- NULL
class(tx)
tx <- tx %>% data.frame()
tx <- tx %>% as.matrix
class(tx)
View(tx)
tx <- tx %>% data.frame
sp <- tax_table(ps)[,7]
rownames(sp) <- NULL
sp
sp <- tax_table(ps)[,6]
rownames(sp) <- NULL
sp
View(p$data)
max(p$data$Cycle)
p <- plotQualityProfile(fnFs[c(2,3)])
max(p$data$Cycle)
ps <- readRDS("./Data/ps_zymo.rds")
ps
ps <- readRDS("./Data/ps_zymo.rds")
ps
ps <- readRDS("./Data/ps_zymo_not_remove_primers.rds")
plot_richness(ps, x="SampleType", measures=c("Shannon", "Simpson"), color="SampleType")
ps <- readRDS("./Data/ps_zymo_primers_trim.rds")
ps
sp <- tax_table(ps)[,7]
rownames(sp) <- NULL
sp
sp <- tax_table(ps)[,c(6,7)]
rownames(sp) <- NULL
View(sp)
View(data.frame(sp))
View(data.frame(sp))
View(otu_table(ps) %>% data.frame)
View(t(otu_table(ps)) %>% data.frame)
ps <- readRDS("./Data/ps_zymo_primer_trimeed_err_1.rds")
ps
sp <- tax_table(ps)[,c(6,7)]
rownames(sp) <- NULL
View(data.frame(sp))
colSums(otu_table(ps))
dim(otu_table(ps))
row(otu_table(ps))
rowSums(otu_table(ps))
ps
ps <- readRDS("./Data/ps_zymo_primers_trim.rds")
ps
rowSums(otu_table(ps))
ps
rowSums(otu_table(subset_samples(ps, Sample_Type == "Negative")))
rowSums(otu_table(subset_samples(ps, SampleType == "Negative")))
rowSums(otu_table(subset_samples(ps, SampleType == "Standard")))
summary(rowSums(otu_table(subset_samples(ps, SampleType == "Negative"))))
summary(rowSums(otu_table(subset_samples(ps, SampleType == "Standard"))))
ps <- readRDS("./Data/ps_zymo_not_remove_primers.rds")
summary(rowSums(otu_table(subset_samples(ps, SampleType == "Negative"))))
ps
ps <- readRDS("./Data/ps_zymo_primers_trim.rds")
ps
xx <- as.character("AGTTAGGAATCTTCGTCAATGGGCGAAAGCCTGAACGAGCGACGCCGCTTGAGGGACGAAGCCCTTCGGGGTGTAAACCTCTGAACAGGGGACGATGATGACGGTACCCTGCTAATAGCACCGGCTAACTCCGTGCCAGCAGCCGCGGTAATACGGAGGGTGCGAACGTTACCCGGATTTACTGGGCGTAAAGGGCGTGTAGGCGGTTTTCTAAGTCCGGGGCTAAAGACCAGGGCTCAACCCTGGGTTTGCCTTGGATACTGGAAAGCTCGACGGCTGGAGGGGGCAGCGGAATTTCCGGAGTAGCGGTGAAATGCGCAGATACCGGAAGGAACGCCAATAGCGAAGGCAGCTGCCTGGACAGTACGTGACGCTGAGGCGCGAAAGCGTGGGGAGCAAA")
length(xx)
xx
nchar(xx)
yy_woth_primers <- as.character(GCCTACGGGAGGCTGCAGTTAGGAATCTTCGTCAATGGGCGAAAGCCTGAACGAGCGACGCCGCTTGAGGGACGAAGCCCTTCGGGGTGTAAACCTCTGAACAGGGGACGATGATGACGGTACCCTGCTAATAGCACCGGCTAACTCCGTGCCAGCAGCCGCGGTAATACGGAGGGTGCGAACGTTACCCGGATTTACTGGGCGTAAAGGGCGTGTAGGCGGTTTTCTAAGTCCGGGGCTAAAGACCAGGGCTCAACCCTGGGTTTGCCTTGGATACTGGAAAGCTCGACGGCTGGAGGGGGCAGCGGAATTTCCGGAGTAGCGGTGAAATGCGCAGATACCGGAAGGAACGCCAATAGCGAAGGCAGCTGCCTGGACAGTACGTGACGCTGAGGCGCGAAAGCGTGGGGAGCAAACCGGATTAGATACCCTCGTAGTCT)
yy_woth_primers <- as.character("GCCTACGGGAGGCTGCAGTTAGGAATCTTCGTCAATGGGCGAAAGCCTGAACGAGCGACGCCGCTTGAGGGACGAAGCCCTTCGGGGTGTAAACCTCTGAACAGGGGACGATGATGACGGTACCCTGCTAATAGCACCGGCTAACTCCGTGCCAGCAGCCGCGGTAATACGGAGGGTGCGAACGTTACCCGGATTTACTGGGCGTAAAGGGCGTGTAGGCGGTTTTCTAAGTCCGGGGCTAAAGACCAGGGCTCAACCCTGGGTTTGCCTTGGATACTGGAAAGCTCGACGGCTGGAGGGGGCAGCGGAATTTCCGGAGTAGCGGTGAAATGCGCAGATACCGGAAGGAACGCCAATAGCGAAGGCAGCTGCCTGGACAGTACGTGACGCTGAGGCGCGAAAGCGTGGGGAGCAAACCGGATTAGATACCCTCGTAGTCT")
nchar(yy_woth_primers)
16+24
yy2 <- as.character("GCCTACGGGAGGCTGCAGTGGGGAATTTTGGACAATGGGCGAAAGCCTGATCCAGCAATGCCGCGTGTGTGAAGAAGGCCTTCGGGTTGTAAAGCACTTTTGTCCGGAAAGAAATGGCTCTGGTTAATACCTGGGGTCGATGACGGTACCGGAAGAATAAGGACCGGCTAACTACGTGCCAGCAGCCGCGGTAATACGTAGGGTCCAAGCGTTAATCGGAATTACTGGGCGTAAAGCGTGCGCAGGCGGTTGTGCAAGACCGATGTGAAATCCCCGAGCTTAACTTGGGAATTGCATTGGTGACTGCACGGCTAGAGTGTGTCAGAGGGGGGTAGAATTCCACGTGTAGCAGTGAAATGCGTAGAGATGTGGAGGAATACCGATGGCGAAGGCAGCCCCCTGGGATAACACTGACGCTCATGCACGAAAGCGTGGGGAGCAAACAGGATTAGATACCCTTGTAGTCA")
nchar(yy2)
ww <- as.character("AGCCAGGAATCTTGCGCAATGGGCGAAAGCCTGACGCAGCAACGCCGCGTGGGCGATGAAGGCCTTCGGGTCGTAAAGCCCTGTTGTCGGGGACGAAGGGCGAAGGGTTAATAGCCCCTAGCCTGACGGTACCCGACGAGGAAGCCCCGGCTAACTACGTGCCAGCAGCCGCGGTAATACGTAGGGGGCGAGCGTTGTCCGGAATCACTGGGCGTAAAGAGCGTGTAGGCGGCCCGGTAAGTCTGCTGTGAAAACCCGGGGCTCAACCCCGGGCGTGCAGTGGAAACTGCCGGGCTAGAGGGCGGCAGAGGCGAGTGGAATTCCCGGTGTAGCGGTGAAATGCGCAGATATCGGGAGGAACACCAGTAGCGAAGGCGGCTCGCTGGGCCGTCCCTGACGCTGAGACGCGAAAGCTAGGGGAGCGAA")
nchar(ww)
ww2 <- as.character("AGTTAGGAATCTTCGTCAATGGGCGAAAGCCTGAACGAGCGACGCCGCTTGAGGGACGAAGCCCTTCGGGGTGTAAACCTCTGAACAGGGGACGATGATGACGGTACCCTGCTAATAGCACCGGCTAACTCCGTGCCAGCAGCCGCGGTAATACGGAGGGTGCGAACGTTACCCGGATTTACTGGGCGTAAAGGGCGTGTAGGCGGTTTTCTAAGTCCGGGGCTAAAGACCAGGGCTCAACCCTGGGTTTGCCTTGGATACTGGAAAGCTCGACGGCTGGAGGGGGCAGCGGAATTTCCGGAGTAGCGGTGAAATGCGCAGATACCGGAAGGAACGCCAATAGCGAAGGCAGCTGCCTGGACAGTACGTGACGCTGAGGCGCGAAAGCGTGGGGAGCAAA")
nchar(ww2)
x <- as.character("AGCCAGGAATCTTGCGCAATGGGCGAAAGCCTGACGCAGCAACGCCGCGTGGGCGATGAAGGCCTTCGGGTCGTAAAGCCCTGTTGTCGGGGACGAAGGGCGAAGGGTTAATAGCCCCTAGCCTGACGGTACCCGACGAGGAAGCCCCGGCTAACTACGTGCCAGCAGCCGCGGTAATACGTAGGGGGCGAGCGTTGTCCGGAATCACTGGGCGTAAAGAGCGTGTAGGCGGCCCGGTAAGTCTGCTGTGAAAACCCGGGGCTCAACCCCGGGCGTGCAGTGGAAACTGCCGGGCTAGAGGGCGGCAGAGGCGAGTGGAATTCCCGGTGTAGCGGTGAAATGCGCAGATATCGGGAGGAACACCAGTAGCGAAGGCGGCTCGCTGGGCCGTCCCTGACGCTGAGACGCGAAAGCTAGGGGAGCGAA")
y <- as.character("AGCCAGGAATCTTGCGCAATGGGCGAAAGCCTGACGCAGCAACGCCGCGTGGGCGATGAAGGCCTTCGGGTCGTAAAGCCCTGTTGTCGGGGACGAAGGGCGAAGGGTTAATAGCCCCTAGCCTGACGGTACCCGACGAGGAAGCCCCGGCTAACTACGTGCCAGCAGCCGCGGTAATACGTAGGGGGCGAGCGTTGTCCGGAATCACTGGGCGTAAAGAGCGTGTAGGCGGCCCGGTAAGTCTGCTGTGAAAACCCGGGGCTCAACCCCGGGCGTGCAGTGGAAACTGCCGGGCTAGAGGGCGGCAGAGGCGAGTGGAATTCCCGGTGTAGCGGTGAAATGCGCAGATATCGGGAGGAACACCAGTAGCGAAGGCGGCTCGCTGGGCCGTCCCTGACGCTGAGACGCGAAAGCTAGGGGAGCGAA")
nchar(x)
nchar(y)
x==y
z <- as.character("AGCCAGGAATCTTGCGCAATGGGCGAAAGCCTGACGCAGCAACGCCGCGTGGGCGATGAAGGCCTTCGGGTCGTAAAGCCCTGTTGTCGGGGACGAAGGGCGAAGGGTTAATAGCCCCTAGCCTGACGGTACCCGACGAGGAAGCCCCGGCTAACTACGTGCCAGCAGCCGCGGTAATACGTAGGGGGCGAGCGTTGTCCGGAATCACTGGGCGTAAAGAGCGTGTAGGCGGCCCGGTAAGTCTGCTGTGAAAACCCGGGGCTCAACCCCGGGCGTGCAGTGGAAACTGCCGGGCTAGAGGGCGGCAGAGGCGAGTGGAATTCCCGGTGTAGCGGTGAAATGCGCAGATATCGGGAGGAACACCAGTAGCGAAGGCGGCTCGCTGGGCCGTCCCTGACGCTGAGACGCGAAAGCTAGGGGAGCGAA")
nchar(z)
x==z
y==z
ps <- readRDS("./Data/ps_zymo.rds")
sp <- tax_table(ps)[, c(6,7)]
rownames(sp) <- NULL
View(data.frame(sp))
xp <- as.character("GCCTACGGGAGGCTGCAGTTAGGAATCTTCGTCAATGGGCGAAAGCCTGAACGAGCGACGCCGCTTGAGGGACGAAGCCCTTCGGGGTGTAAACCTCTGAACAGGGGACGATGATGACGGTACCCTGCTAATAGCACCGGCTAACTCCGTGCCAGCAGCCGCGGTAATACGGAGGGTGCGAACGTTACCCGGATTTACTGGGCGTAAAGGGCGTGTAGGCGGTTTTCTAAGTCCGGGGCTAAAGACCAGGGCTCAACCCTGGGTTTGCCTTGGATACTGGAAAGCTCGACGGCTGGAGGGGGCAGCGGAATTTCCGGAGTAGCGGTGAAATGCGCAGATACCGGAAGGAACGCCAATAGCGAAGGCAGCTGCCTGGACAGTACGTGACGCTGAGGCGCGAAAGCGTGGGGAGCAAACCGGATTAGATACCCTCGTAGTCT")
nchar(xp)
View(data.frame(otu_table(ps)[1,]))
colnames(data.frame(otu_table(ps)[1,]))[2]
x <- colnames(data.frame(otu_table(ps)[1,]))[2]
y <- as.character(AGTGGGGAATTTTGGACAATGGGCGAAAGCCTGATCCAGCAATGCCGCGTGTGTGAAGAAGGCCTTCGGGTTGTAAAGCACTTTTGTCCGGAAAGAAATGGCTCTGGTTAATACCTGGGGTCGATGACGGTACCGGAAGAATAAGGACCGGCTAACTACGTGCCAGCAGCCGCGGTAATACGTAGGGTCCAAGCGTTAATCGGAATTACTGGGCGTAAAGCGTGCGCAGGCGGTTGTGCAAGACCGATGTGAAATCCCCGAGCTTAACTTGGGAATTGCATTGGTGACTGCACGGCTAGAGTGTGTCAGAGGGGGGTAGAATTCCACGTGTAGCAGTGAAATGCGTAGAGATGTGGAGGAATACCGATGGCGAAGGCAGCCCCCTGGGATAACACTGACGCTCATGCACGAAAGCGTGGGGAGCAAA)
y <- as.character("AGTGGGGAATTTTGGACAATGGGCGAAAGCCTGATCCAGCAATGCCGCGTGTGTGAAGAAGGCCTTCGGGTTGTAAAGCACTTTTGTCCGGAAAGAAATGGCTCTGGTTAATACCTGGGGTCGATGACGGTACCGGAAGAATAAGGACCGGCTAACTACGTGCCAGCAGCCGCGGTAATACGTAGGGTCCAAGCGTTAATCGGAATTACTGGGCGTAAAGCGTGCGCAGGCGGTTGTGCAAGACCGATGTGAAATCCCCGAGCTTAACTTGGGAATTGCATTGGTGACTGCACGGCTAGAGTGTGTCAGAGGGGGGTAGAATTCCACGTGTAGCAGTGAAATGCGTAGAGATGTGGAGGAATACCGATGGCGAAGGCAGCCCCCTGGGATAACACTGACGCTCATGCACGAAAGCGTGGGGAGCAAA")
nchar(x)
nchar(y)
x==y
x <- as.character("AGTAGGGAATCTTCCGCAATGGACGAAAGTCTGACGGAGCAACGCCGCGTGTATGAAGAAGGTTTTCGGATCGTAAAGTACTGTTGTTAGAGAAGAACAAGGATAAGAGTAACTGCTTGTCCCTTGACGGTATCTAACCAGAAAGCCACGGCTAACTACGTGCCAGCAGCCGCGGTAATACGTAGGTGGCAAGCGTTGTCCGGATTTATTGGGCGTAAAGCGCGCGCAGGCGGTCTTTTAAGTCTGATGTGAAAGCCCCCGGCTTAACCGGGGAGGGTCATTGGAAACTGGAAGACTGGAGTGCAGAAGAGGAGAGTGGAATTCCACGTGTAGCGGTGAAATGCGTAGATATGTGGAGGAACACCAGTGGCGAAGGCGACTCTCTGGTCTGTAACTGACGCTGAGGCGCGAAAGCGTGGGGAGCAAA")
nchar(x)
x <- as.character("AGTGGGGAATATTGCACAATGGGCGCAAGCCTGATGCAGCCATGCCGCGTGTATGAAGAAGGCCTTCGGGTTGTAAAGTACTTTCAGTGGGGAGGAAGGGAGTAAAGTTAATACCTTTGCTCATTGACGTTACCCGCAGAAGAAGCACCGGCTAACTCCGTGCCAGCAGCCGCGGTAATACGGAGGGTGCAAGCGTTAATCGGAATTACTGGGCGTAAAGCGCACGCAGGCGGTTTGTTAAGTCAGATGTGAAATCCCCGGGCTCAACCTGGGAACTGCATCTGATACTGGCAAGCTTGAGTCTCGTAGAGGGGGGTAGAATTCCAGGTGTAGCGGTGAAATGCGTAGAGATCTGGAGGAATACCGGTGGCGAAGGCGGCCCCCTGGACGAAGACTGACGCTCAGGTGCGAAAGCGTGGGGAGCAAA")
nchar(x)
x <- as.character("AGTAGGGAATCTTCCGCAATGGGCGAAAGCCTGACGGAGCAACGCCGCGTGAGTGATGAAGGTCTTCGGATCGTAAAACTCTGTTATTAGGGAAGAACATATGTGTAAGTAACTGTGCACATCTTGACGGTACCTAATCAGAAAGCCACGGCTAACTACGTGCCAGCAGCCGCGGTAATACGTAGGTGGCAAGCGTTATCCGGAATTATTGGGCGTAAAGCGCGCGTAGGCGGTTTTTTAAGTCTGATGTGAAAGCCCACGGCTCAACCGTGGAGGGTCATTGGAAACTGGAAAACTTGAGTGCAGAAGAAGAAAGTGGAATTCCATGTGTAGCGGTGAAATGCGCAGAGATATGGAGGAACACCAGTGGCGAAGGCGACTTTCTGGTCTGTAACTGACGCTGATGTGCGAAAGCGTGGGGATCAAA")
nchar(x)
y <- as.character("AGTAGGGAATCTTCCGCAATGGACGAAAGTCTGACGGAGCAACGCCGCGTGAGTGATGAAGGTTTTCGGATCGTAAAGCTCTGTTGTTAGGGAAGAACAAGTACCGTTCGAATAGGGCGGTACCTTGACGGTACCTAACCAGAAAGCCACGGCTAACTACGTGCCAGCAGCCGCGGTAATACGTAGGTGGCAAGCGTTGTCCGGATTTATTGGGCGTAAAGCGAGCGCAGGCGGTTTCTTAAGTCTGATGTGAAAGCCCCCGGCTCAACCGGGGAGGGTCATTGGAAACTGGGAGACTTGAGTGCAGAAGAGGAGAGTGGAATTCCATGTGTAGCGGTGAAATGCGTAGATATATGGAGGAACACCAGTGGCGAAGGCGGCTCTCTGGTCTGTAACTGACGCTGAGGCTCGAAAGCGTGGGGAGCAAA")
x==y
nchar(y))
nchar(y)
x4 <- as.character("AGCCAGGAATCTTGCGCAATGGGCGAAAGCCTGACGCAGCAACGCCGCGTGGGCGATGAAGGCCTTCGGGTCGTAAAGCCCTGTTGTCGGGGACGAAGGGCGAAGGGTTAATAGCCCCTAGCCTGACGGTACCCGACGAGGAAGCCCCGGCTAACTACGTGCCAGCAGCCGCGGTAATACGTAGGGGGCGAGCGTTGTCCGGAATCACTGGGCGTAAAGAGCGTGTAGGCGGCCCGGTAAGTCTGCTGTGAAAACCCGGGGCTCAACCCCGGGCGTGCAGTGGAAACTGCCGGGCTAGAGGGCGGCAGAGGCGAGTGGAATTCCCGGTGTAGCGGTGAAATGCGCAGATATCGGGAGGAACACCAGTAGCGAAGGCGGCTCGCTGGGCCGTCCCTGACGCTGAGACGCGAAAGCTAGGGGAGCGAA")
x3 <- as.character("AGCCAGGAATCTTGCGCAATGGGCGAAAGCCTGACGCAGCAACGCCGCGTGGGCGATGAAGGCCTTCGGGTCGTAAAGCCCTGTTGTCGGGGACGAAGGGCGAAGGGTTAATAGCCCCTAGCCTGACGGTACCCGACGAGGAAGCCCCGGCTAACTACGTGCCAGCAGCCGCGGTAATACGTAGGGGGCGAGCGTTGTCCGGAATCACTGGGCGTAAAGAGCGTGTAGGCGGCCCGGTAAGTCTGCTGTGAAAACCCGGGGCTCAACCCCGGGCGTGCAGTGGAAACTGCCGGGCTAGAGGGCGGCAGAGGCGAGTGGAATTCCCGGTGTAGCGGTGAAATGCGCAGATATCGGGAGGAACACCAGTAGCGAAGGCGGCTCGCTGGGCCGTCCCTGACGCTGAGACGCGAAAGCTAGGGGAGCGAA")
nchar(x4)
nchar(x3)
x4==x3
ps <- readRDS("./Data/ps_zymo.rds")
ps
View(otu_table(ps) %>% data.frame)
rowsum(otu_table(ps) %>% data.frame)
rowSum(otu_table(ps) %>% data.frame)
rowSums(otu_table(ps) %>% data.frame)
rowSums(otu_table(subset_samples(ps, SampleType == "Negative")) %>% data.frame)
summary(rowSums(otu_table(subset_samples(ps, SampleType == "Negative")) %>% data.frame))
summary(rowSums(otu_table(subset_samples(ps, SampleType == "Standard")) %>% data.frame))
ot <- otu_table(ps) %>% data.frame
ot <- ot %>% t
View(ot)
rownames(ot) <- tax_table(ps)[,6]
View(ot)
View(ot/colSums(ot))
.11+.01
