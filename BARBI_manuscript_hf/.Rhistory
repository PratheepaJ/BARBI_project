rm(list = ls())
library(DESeq2)
library(phyloseq)
library(dplyr)
library(tidyr)
library(ggplot2)
ps <- readRDS("./Data/pshf.rds")
set1 <- c("FL002","FL003","FL004","FL005")
set2 <- c("FL006","FL007","FL008","FL009","FL010","FL011")
#       the following negative controls are in set 2 only.
nctrl <- c("Water.Keck.1","Phix.1","Phix.2","Water.ctrl.1","Water.ctrl.2")
ext.num <- sample_data(ps)$SubjectName
blocks <-ifelse(ext.num %in% set1, "Set1", "Set2")
sample_data(ps)$block <- blocks
if (dim(otu_table(ps))[1] != ntaxa(ps)){otu_table(ps) <- t(otu_table(ps))}
#   total reads per sample
totalReads <- colSums(otu_table(ps))
#   distribution of total reads per sample
hist(log(totalReads),yaxs = "i",xaxs = "i",main = "Distribution of total reads per sample",breaks = 50)
#   select plasma samples and negative controls
ps <- subset_samples(ps,Sample_Type %in% c("Plasma","Control"))
ps <- prune_taxa(taxa_sums(ps) > 0, ps)
ps_plasma <- subset_samples(ps,Sample_Type %in% c("Plasma"))
prevTaxaP <- apply(otu_table(ps_plasma), 1 ,function(x){sum(x>0)})
Contaminants1 <- names(prevTaxaP)[prevTaxaP==0]
ps <- prune_taxa(prevTaxaP > 0,ps)
psR <- transform_sample_counts(ps, function(x){
x <- rank(x)
x <- x-1000
x[x<1] <- 1
return(x)
})
library(ade4)
abund_ranks <- otu_table(psR) %>% t %>% data.frame
ranks_pca <- dudi.pca(abund_ranks, scannf = F, nf = 3)
row_scores <- data.frame(li = ranks_pca$li,
SampleCode = rownames(abund_ranks))
#row_scores$SampleID <- as.character(row_scores$SampleID)
#samdf <- sample_data(psR) %>% data.frame
#samdf$SampleID <- as.character(samdf$SampleID)
row_scores <- row_scores %>%
left_join(sample_data(psR))
row_scores$block <- factor(row_scores$block)
evals_prop <- 100 * (ranks_pca$eig / sum(ranks_pca$eig))
evals <- ranks_pca$eig
p <- ggplot() +
geom_point(data = row_scores, aes(x = li.Axis1, y = li.Axis2, shape = Sample_Type, color = block))  +
guides(col = guide_legend(override.aes = list(size = 3))) +
labs(x = sprintf("Axis1 [%s%% variance]", round(evals_prop[1], 2)),
y = sprintf("Axis2 [%s%% variance]", round(evals_prop[2], 2))) +
ggtitle("")+
theme_bw() +
theme(panel.border = element_rect(color = "#787878", fill = alpha("white", 0)), plot.title = element_text(hjust = .5)) + guides(shape = guide_legend(title="Sample Type"))
# coord_fixed(sqrt(ranks_pca$eig[2] / ranks_pca$eig[1])) +
p
ggsave("./Figures/PCA_flossing.eps", plot=p, width = 12,height = 8)
p
ggsave("./Figures/PCA_SIRS.eps", plot=p, width = 12, height = 8)
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
#library(BARBI)
library(devtools)
library(phyloseq)
library(DESeq2)
library(dplyr)
library(tidyr)
library(R.utils)
library(BiocParallel)
library(doParallel)
library(parallel)
library(HDInterval)
library(grid)
library(xtable)
library(gtable)
library(gridExtra)
library(BiocStyle)
library(magrittr)
sourceDirectory("./R")
#sourceDirectory("/Users/jpratheepa31/Dropbox/GitHub/BARBI/R")
t1 <- proc.time()
ncores <- as.integer(Sys.getenv("SLURM_NTASKS"))
if(is.na(ncores)) ncores <- parallel::detectCores()
ncores
ps <- readRDS("./Data/pshf.rds")
ps
if(dim(otu_table(ps))[1]!=ntaxa(ps)){otu_table(ps) <- t(otu_table(ps))}
summary(sample_data(subset_samples(ps, Sample_Type == "Plasma"))$Reads)/(2*10^6)
summary(sample_data(subset_samples(ps, Sample_Type == "Control"))$Reads)/(2*10^6)
View(sample_data(ps) %>% data.frame())
class(sample_data(ps)$Reads)
sample_data(ps)$Reads <- as.numeric(sample_data(ps)$Reads)
head(sample_data(ps)$Reads)
ps <- readRDS("./Data/pshf.rds")
ps
if(dim(otu_table(ps))[1]!=ntaxa(ps)){otu_table(ps) <- t(otu_table(ps))}
head(sample_data(ps)$Reads)
head(as.character(sample_data(ps)$Reads))
head(as.numeric(gsub(",","",sample_data(ps)$Reads)))
sample_data(ps)$Reads <- as.numeric(gsub(",","",sample_data(ps)$Reads))
summary(sample_data(subset_samples(ps, Sample_Type == "Plasma"))$Reads)/(2*10^6)
summary(sample_data(subset_samples(ps, Sample_Type == "Control"))$Reads)/(2*10^6)
summary(sample_data(subset_samples(ps, Sample_Type == "Plasma"))$Non.Human.Reads)/(2*10^4)
summary(sample_data(subset_samples(ps, Sample_Type == "Control"))$Non.Human.Reads)/(2*10^5)
summary(sample_data(subset_samples(ps, Sample_Type == "Plasma"))$Non.Human.Reads)
which(sample_data(ps)$Non.Human.Reads < 0)
sample_data(ps)$Non.Human.Reads[which(sample_data(ps)$Non.Human.Reads < 0)]
-1 *sample_data(ps)$Non.Human.Reads[which(sample_data(ps)$Non.Human.Reads < 0)]
sample_data(ps)$Non.Human.Reads[which(sample_data(ps)$Non.Human.Reads < 0)] <- -1 *sample_data(ps)$Non.Human.Reads[which(sample_data(ps)$Non.Human.Reads < 0)]
summary(sample_data(subset_samples(ps, Sample_Type == "Plasma"))$Non.Human.Reads)/(2*10^4)
summary(sample_data(subset_samples(ps, Sample_Type == "Control"))$Non.Human.Reads)/(2*10^5)
sample_data(ps)$Non.Human.Reads[which(sample_data(ps)$Non.Human.Reads < 0)] <- -1 *sample_data(ps)$Non.Human.Reads[which(sample_data(ps)$Non.Human.Reads < 0)]
summary(sample_data(subset_samples(ps, Sample_Type == "Plasma"))$Non.Human.Reads)/(2*10^4)
summary(sample_data(subset_samples(ps, Sample_Type == "Control"))$Non.Human.Reads)/(2*10^4)
sample_data(ps)$Non.Human.Reads[which(sample_data(ps)$Non.Human.Reads < 0)] <- -1 *sample_data(ps)$Non.Human.Reads[which(sample_data(ps)$Non.Human.Reads < 0)]
summary(sample_data(subset_samples(ps, Sample_Type == "Plasma"))$Non.Human.Reads)/(2*10^4)
summary(sample_data(subset_samples(ps, Sample_Type == "Control"))$Non.Human.Reads)/(2*10^3)
sample_data(ps)$Non.Human.Reads[which(sample_data(ps)$Non.Human.Reads < 0)] <- -1 *sample_data(ps)$Non.Human.Reads[which(sample_data(ps)$Non.Human.Reads < 0)]
summary(sample_data(subset_samples(ps, Sample_Type == "Plasma"))$Non.Human.Reads)/(2*10^4)
summary(sample_data(subset_samples(ps, Sample_Type == "Control"))$Non.Human.Reads)/(2*10^2)
summary(sample_data(subset_samples(ps, Sample_Type == "Control"))$Non.Human.Reads)/(2*10^5)
summary(sample_data(subset_samples(ps, Sample_Type == "Control"))$Non.Human.Reads)/(2*10^6)
nsamples(subset_samples(ps, Sample_Type=="Control"))
nsamples(subset_samples(ps, Sample_Type=="Plasma"))
ps
names(sample_data(ps))
set1 <- c("FL002","FL003","FL004","FL005")
set2 <- c("FL006","FL007","FL008","FL009","FL010","FL011")
#       the following negative controls are in set 2 only.
nctrl <- c("Water.Keck.1","Phix.1","Phix.2","Water.ctrl.1","Water.ctrl.2")
ext.num <- sample_data(ps)$SubjectName
blocks <-ifelse(ext.num %in% set1, "Set1", "Set2")
sample_data(ps)$block <- blocks
head(sample_data(ps)$SampleCode)
ps.top <- ps
# do arcsinh transformation
ot <- otu_table(ps.top) %>% data.frame %>% as.matrix
# do arcsinh transformation
ot <- otu_table(ps.top) %>% data.frame %>% as.matrix
geo_mean <- function(x) {
if(all(x == 0)){
val <- 0
}else{
val <- exp(sum(log(x[x > 0]))/length(x))
}
return(val)
}
geo_mean <- function(x) {
if(all(x == 0)){
val <- 0
}else{
val <- exp(sum(log(x[x > 0]))/length(x))
}
return(val)
}
geom_mean_row <- apply(ot, 1, FUN = geo_mean)
sj <- estimateSizeFactorsForMatrix(ot, median, geoMeans = geom_mean_row)
ot.trans <- t(asinh(t(ot)/sj))
ps.top <- phyloseq(otu_table(ot.trans, taxa_are_rows = TRUE), sample_data(ps.top), tax_table(ps.top))
# choose top 30 species in plasma samples for heatmap
top <- names(sort(taxa_sums(subset_samples(ps.top, Sample_Type == "Plasma")), decreasing=TRUE))[1:30]
ps.top <- prune_taxa(top, ps.top)
otu_table(ps.top) <- otu_table(ps.top) +1
# order sample by plasma and control
df <- data.frame(sample_data(ps)$SampleCode, sample_data(ps)$Sample_Type)
sam.order <- as.character(df$sample_data.ps..SampleCode)
head(sam.order)
View(df)
View(df[order(df$sample_data.ps..Sample_Type),])
df <- df[order(df$sample_data.ps..Sample_Type),]
sam.order <- as.character(df$sample_data.ps..SampleCode)
head(sam.order)
p <- plot_heatmap(ps.top, sample.label = "SampleCode", taxa.label="Species", taxa.order = top, sample.order = sam.order) + guides(fill = guide_legend(title="asinh abundance")) + facet_wrap(~block, scales = "free_x")
library(ggplot2)
p <- plot_heatmap(ps.top, sample.label = "SampleCode", taxa.label="Species", taxa.order = top, sample.order = sam.order) + guides(fill = guide_legend(title="asinh abundance")) + facet_wrap(~block, scales = "free_x")
p
ggsave("./Figures/heatmap_hf_top.eps", plot = p, width = 20, height = 8)
ps <- prune_taxa(taxa_sums(ps) > 0, ps)
ps_plasma <- subset_samples(ps,Sample_Type %in% c("Plasma"))
prevTaxaP <- apply(otu_table(ps_plasma), 1 ,function(x){sum(x>0)})
Contaminants1 <- names(prevTaxaP)[prevTaxaP == 0]
ps <- prune_taxa(prevTaxaP > 0, ps)
totalReads <- colSums(otu_table(subset_samples(ps, Sample_Type == "Plasma")))
hist(log(totalReads),yaxs="i",xaxs="i",main="Distribution of total reads per sample", breaks=50)
totalReads <- colSums(otu_table(subset_samples(ps, Sample_Type == "Control")))
hist(log(totalReads),yaxs="i",xaxs="i",main="Distribution of total reads per sample", breaks=50)
table(sample_data(ps)$Sample_Type, sample_data(ps)$block)
psBlockResult <- psBlockResults(ps, sampleTypeVar = "Sample_Type", caselevels = c("Plasma"), controllevel= "Control", sampleName = "SampleCode", blockVar = "block")
psByBlock <- psBlockResult[[1]]
psNCbyBlock <- psBlockResult[[2]]
psallzeroInNC <- psBlockResult[[3]]
psPlByBlock <- psBlockResult[[4]]
saveRDS(psByBlock,"./Results/psByBlock.rds")
ps
psPlByBlock[[1]]
psPlByBlock[[2]]
levels(sample_data(ps)$block)
table(sample_data(ps_decon)$block)
table(sample_data(ps)$block)
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
#library(BARBI)
library(devtools)
library(phyloseq)
library(DESeq2)
library(dplyr)
library(tidyr)
library(R.utils)
library(BiocParallel)
library(doParallel)
library(parallel)
library(HDInterval)
library(grid)
library(xtable)
library(gtable)
library(gridExtra)
library(BiocStyle)
library(magrittr)
library(ggplot2)
sourceDirectory("./R")
#sourceDirectory("/Users/jpratheepa31/Dropbox/GitHub/BARBI/R")
t1 <- proc.time()
ncores <- as.integer(Sys.getenv("SLURM_NTASKS"))
if(is.na(ncores)) ncores <- parallel::detectCores()
ncores
ps <- readRDS("./Data/pshf.rds")
ps
if(dim(otu_table(ps))[1]!=ntaxa(ps)){otu_table(ps) <- t(otu_table(ps))}
set1 <- c("FL002","FL003","FL004","FL005")
set2 <- c("FL006","FL007","FL008","FL009","FL010","FL011")
#       the following negative controls are in set 2 only.
nctrl <- c("Water.Keck.1","Phix.1","Phix.2","Water.ctrl.1","Water.ctrl.2")
ext.num <- sample_data(ps)$SubjectName
blocks <-ifelse(ext.num %in% set1, "Set1", "Set2")
sample_data(ps)$block <- blocks
ps <- subset_samples(ps,Sample_Type %in% c("Plasma", "Control"))
sample_data(ps)$Reads <- as.numeric(gsub(",","",sample_data(ps)$Reads))
summary(sample_data(subset_samples(ps, Sample_Type == "Plasma"))$Reads)/(2*10^6)
summary(sample_data(subset_samples(ps, Sample_Type == "Control"))$Reads)/(2*10^6)
sample_data(ps)$Non.Human.Reads[which(sample_data(ps)$Non.Human.Reads < 0)] <- -1 *sample_data(ps)$Non.Human.Reads[which(sample_data(ps)$Non.Human.Reads < 0)]
summary(sample_data(subset_samples(ps, Sample_Type == "Plasma"))$Non.Human.Reads)/(2*10^4)
summary(sample_data(subset_samples(ps, Sample_Type == "Control"))$Non.Human.Reads)/(2*10^6)
ps.top <- ps
# do arcsinh transformation
ot <- otu_table(ps.top) %>% data.frame %>% as.matrix
geo_mean <- function(x) {
if(all(x == 0)){
val <- 0
}else{
val <- exp(sum(log(x[x > 0]))/length(x))
}
return(val)
}
geom_mean_row <- apply(ot, 1, FUN = geo_mean)
sj <- estimateSizeFactorsForMatrix(ot, median, geoMeans = geom_mean_row)
ot.trans <- t(asinh(t(ot)/sj))
ps.top <- phyloseq(otu_table(ot.trans, taxa_are_rows = TRUE), sample_data(ps.top), tax_table(ps.top))
# choose top 30 species in plasma samples for heatmap
top <- names(sort(taxa_sums(subset_samples(ps.top, Sample_Type == "Plasma")), decreasing=TRUE))[1:30]
ps.top <- prune_taxa(top, ps.top)
otu_table(ps.top) <- otu_table(ps.top) +1
# order sample by plasma and control
df <- data.frame(sample_data(ps)$SampleCode, sample_data(ps)$Sample_Type)
df <- df[order(df$sample_data.ps..Sample_Type),]
sam.order <- as.character(df$sample_data.ps..SampleCode)
p <- plot_heatmap(ps.top, sample.label = "SampleCode", taxa.label="Species", taxa.order = top, sample.order = sam.order) + guides(fill = guide_legend(title="asinh abundance")) + facet_wrap(~block, scales = "free_x")
p
ggsave("./Figures/heatmap_hf_top.eps", plot = p, width = 20, height = 8)
ps <- prune_taxa(taxa_sums(ps) > 0, ps)
ps_plasma <- subset_samples(ps,Sample_Type %in% c("Plasma"))
prevTaxaP <- apply(otu_table(ps_plasma), 1 ,function(x){sum(x>0)})
Contaminants1 <- names(prevTaxaP)[prevTaxaP == 0]
ps <- prune_taxa(prevTaxaP > 0, ps)
totalReads <- colSums(otu_table(subset_samples(ps, Sample_Type == "Plasma")))
hist(log(totalReads),yaxs="i",xaxs="i",main="Distribution of total reads per sample", breaks=50)
totalReads <- colSums(otu_table(subset_samples(ps, Sample_Type == "Control")))
hist(log(totalReads),yaxs="i",xaxs="i",main="Distribution of total reads per sample", breaks=50)
table(sample_data(ps)$Sample_Type, sample_data(ps)$block)
psBlockResult <- psBlockResults(ps, sampleTypeVar = "Sample_Type", caselevels = c("Plasma"), controllevel= "Control", sampleName = "SampleCode", blockVar = "block")
psByBlock <- psBlockResult[[1]]
psNCbyBlock <- psBlockResult[[2]]
psallzeroInNC <- psBlockResult[[3]]
psPlByBlock <- psBlockResult[[4]]
saveRDS(psByBlock,"./Results/psByBlock.rds")
alphaBetaNegControl <- alphaBetaNegControl(psNCbyBlock = psNCbyBlock, stringent = FALSE)
saveRDS(alphaBetaNegControl, "./Results/alphaBetaNegControl.rds")
num_blks <- length(alphaBetaNegControl)
blks <- seq(1, num_blks) %>% as.list
gammaPrior_all_blks <- lapply(blks, function(x){
gammaPrior <- alphaBetaContInPlasma(psPlByBlock = psPlByBlock, psallzeroInNC = psallzeroInNC, blk = x, alphaBetaNegControl = alphaBetaNegControl)
return(gammaPrior)
})
proc.time()-t1
saveRDS(gammaPrior_all_blks, "./Results/gammaPrior_all_blks.rds")
ps.decon <- saveRDS(ps_decon,"./Results/ps_decon.rds")
ps.decon <- readRDS("./Results/ps_decon.rds")
ps.top <- ps.decon
# do arcsinh transformation
ot <- otu_table(ps.top) %>% data.frame %>% as.matrix
geo_mean <- function(x) {
if(all(x == 0)){
val <- 0
}else{
val <- exp(sum(log(x[x > 0]))/length(x))
}
return(val)
}
ps.decon
geom_mean_row <- apply(ot, 1, FUN = geo_mean)
sj <- estimateSizeFactorsForMatrix(ot, median, geoMeans = geom_mean_row)
ot.trans <- t(asinh(t(ot)/sj))
ps.top <- phyloseq(otu_table(ot.trans, taxa_are_rows = TRUE), sample_data(ps.top), tax_table(ps.top))
# choose top 30 species in plasma samples for heatmap
top <- names(sort(taxa_sums(subset_samples(ps.top, Sample_Type == "Plasma")), decreasing=TRUE))[1:30]
ps.top <- prune_taxa(top, ps.top)
otu_table(ps.top) <- otu_table(ps.top) +1
# order sample by plasma and control
df <- data.frame(sample_data(ps)$SampleCode, sample_data(ps)$Sample_Type)
df <- df[order(df$sample_data.ps..Sample_Type),]
sam.order <- as.character(df$sample_data.ps..SampleCode)
sam.order
ps.decon <- readRDS("./Results/ps_decon.rds")
ps.top <- ps.decon
ps.top
# do arcsinh transformation
ot <- otu_table(ps.top) %>% data.frame %>% as.matrix
geo_mean <- function(x) {
if(all(x == 0)){
val <- 0
}else{
val <- exp(sum(log(x[x > 0]))/length(x))
}
return(val)
}
geom_mean_row <- apply(ot, 1, FUN = geo_mean)
sj <- estimateSizeFactorsForMatrix(ot, median, geoMeans = geom_mean_row)
ot.trans <- t(asinh(t(ot)/sj))
ps.top <- phyloseq(otu_table(ot.trans, taxa_are_rows = TRUE), sample_data(ps.top), tax_table(ps.top))
# choose top 30 species in plasma samples for heatmap
top <- names(sort(taxa_sums(subset_samples(ps.top, Sample_Type == "Plasma")), decreasing=TRUE))[1:30]
top
dim(otu_table(ps.top))
View(ot)
# choose top 30 species in plasma samples for heatmap
prev <- apply(ot, 1, function(x){sum(x>0)})
prev
top <- names(sort(prev, decreasing = TRUE))
top
sort(prev, decreasing = TRUE)
head(sort(prev, decreasing = TRUE))
head(sort(prev, decreasing = TRUE),20)
View(otu_table(ps.decon) %>% data.frame)
itera <- 100
burnIn <- 5
cov_pro <- .95
mak_tab <- TRUE # need to change to TRUE if you want to make tables
#psByBlock <- readRDS("./Results/psByBlock.rds")
num_blks <- length(psByBlock)
gammaPrior_posTrueSing_all_blocks <- readRDS("./Results/gammaPrior_posTrueSing_all_blocks_hf.rds")
# gammaPrior_posTrueSing_all_blocks is a list that contains first element is the gamma parameters of contaminant intensity in the plasma samples, second element is the posterior sampling
gammaPrior_all_blks <- gammaPrior_posTrueSing_all_blocks[[1]]
post_all_blocks <- gammaPrior_posTrueSing_all_blocks[[2]]
all_real_taxa_lt <- list()
for(blk in 1:num_blks){
taxa_post_all_sam <- post_all_blocks[[blk]]
gammPrior <- gammaPrior_all_blks[[blk]]
total_summary_table <- NULL
all_real_taxa <- character()
for(sam in 1:nsamples(psPlByBlock[[blk]])){
taxa_post <- taxa_post_all_sam[[sam]]
acceptance <- list() #  acceptance rate of MC sampling
exp_post_s <- list()
lower_s <- list() # s true signal
upper_s <- list()
lower_b <- list() # b- contaminant
upper_b <- list()
all_zero_nc <- list()
for(taxa in 1:length(taxa_post)){
burnIn  <- burnIn
acceptance[[taxa]]  <-  1-mean(duplicated(taxa_post[[taxa]][-(1:burnIn),]))
exp_post_s[[taxa]] <- mean(taxa_post[[taxa]][-(1:burnIn),])
hdi_v <- hdi(taxa_post[[taxa]][-(1:burnIn),], credMass = cov_pro)
lower_s[[taxa]] <- round(hdi_v[1], digits = 0)
upper_s[[taxa]] <- round(hdi_v[2], digits = 0)
b_int <- rgamma((itera-burnIn+1), shape = gammPrior[[sam]][[1]][taxa], rate = gammPrior[[sam]][[2]][taxa])
hdi_b <- hdi(b_int, credMass = cov_pro)
lower_b[[taxa]] <- round(hdi_b[1], digits = 0)
upper_b[[taxa]] <- round(hdi_b[2], digits = 0)
all_zero_nc[[taxa]] <-  gammPrior[[sam]][[5]][taxa]
}
df <- data.frame(Species=taxa_names(psPlByBlock[[blk]]),
xj = as.numeric(gammPrior[[sam]][[3]]),
l_r = unlist(lower_s),
u_r = unlist(upper_s),
l_c = unlist(lower_b),
u_c = unlist(upper_b),
prev_zero_nc = unlist(all_zero_nc)
)
df <- arrange(filter(df, ((l_r > u_c)&(l_r > 0))), desc(xj))
if(dim(df)[1]==0){
df <- data.frame(Species="Negative",
xj="Negative",
l_r="Negative",
u_r="Negative",
l_c ="Negative",
u_c="Negative",
prev_zero_nc = "Negative")
}
all_real_taxa <- c(all_real_taxa,
as.character(df$Species))
if(mak_tab){
filname <- paste0("./Results/", sample_names(psPlByBlock[[blk]])[sam], ".png")
png(filname, height = 600, width = 750)
df_p <- tableGrob(df)
title <- textGrob(sample_names(psPlByBlock[[blk]])[sam], gp = gpar(fontsize = 12))
padding <- unit(0.5,"line")
df_p <- gtable_add_rows(
df_p, heights = grobHeight(title) + padding, pos = 0
)
df_p <- gtable_add_grob(
df_p, list(title),
t = 1, l = 1, r = ncol(df_p)
)
grid.newpage()
grid.draw(df_p)
dev.off()
}
all_real_taxa <- unique(all_real_taxa)
}
all_real_taxa_lt[[blk]] <- all_real_taxa
}
otu_table(ps)["FL003.cf.04",]
otu_table(ps)[,"FL003.cf.04"]
df <- data.frame(otu_table(ps)[,"FL003.cf.04"])
View(df)
real.taxa.in.each.sample <- list()
taxa_post_all_sam <- post_all_blocks[[blk]]
gammPrior <- gammaPrior_all_blks[[blk]]
total_summary_table <- NULL
all_real_taxa <- character()
for(sam in 1:nsamples(psPlByBlock[[blk]])){
taxa_post <- taxa_post_all_sam[[sam]]
acceptance <- list() #  acceptance rate of MC sampling
exp_post_s <- list()
lower_s <- list() # s true signal
upper_s <- list()
lower_b <- list() # b- contaminant
upper_b <- list()
all_zero_nc <- list()
for(taxa in 1:length(taxa_post)){
burnIn  <- burnIn
acceptance[[taxa]]  <-  1-mean(duplicated(taxa_post[[taxa]][-(1:burnIn),]))
exp_post_s[[taxa]] <- mean(taxa_post[[taxa]][-(1:burnIn),])
hdi_v <- hdi(taxa_post[[taxa]][-(1:burnIn),], credMass = cov_pro)
lower_s[[taxa]] <- round(hdi_v[1], digits = 0)
upper_s[[taxa]] <- round(hdi_v[2], digits = 0)
b_int <- rgamma((itera-burnIn+1), shape = gammPrior[[sam]][[1]][taxa], rate = gammPrior[[sam]][[2]][taxa])
hdi_b <- hdi(b_int, credMass = cov_pro)
lower_b[[taxa]] <- round(hdi_b[1], digits = 0)
upper_b[[taxa]] <- round(hdi_b[2], digits = 0)
all_zero_nc[[taxa]] <-  gammPrior[[sam]][[5]][taxa]
}
df <- data.frame(Species=taxa_names(psPlByBlock[[blk]]),
xj = as.numeric(gammPrior[[sam]][[3]]),
l_r = unlist(lower_s),
u_r = unlist(upper_s),
l_c = unlist(lower_b),
u_c = unlist(upper_b),
prev_zero_nc = unlist(all_zero_nc)
)
df <- arrange(filter(df, ((l_r > u_c)&(l_r > 0))), desc(xj))
if(dim(df)[1]==0){
df <- data.frame(Species="Negative",
xj="Negative",
l_r="Negative",
u_r="Negative",
l_c ="Negative",
u_c="Negative",
prev_zero_nc = "Negative")
}
all_real_taxa <- c(all_real_taxa,
as.character(df$Species))
#### make tables
if(mak_tab){
filname <- paste0("./Results/", sample_names(psPlByBlock[[blk]])[sam], ".png")
png(filname, height = 600, width = 750)
df_p <- tableGrob(df)
title <- textGrob(sample_names(psPlByBlock[[blk]])[sam], gp = gpar(fontsize = 12))
padding <- unit(0.5,"line")
df_p <- gtable_add_rows(
df_p, heights = grobHeight(title) + padding, pos = 0
)
df_p <- gtable_add_grob(
df_p, list(title),
t = 1, l = 1, r = ncol(df_p)
)
grid.newpage()
grid.draw(df_p)
dev.off()
}
all_real_taxa <- unique(all_real_taxa)
real.taxa.in.each.sample[[blk]][[sam]] <- df$Species
}
