summary(sample_data(subset_samples(ps, Sample_Type == "Control"))$Reads)/(2*10^6)
sample_data(ps)$Non.Human.Reads[which(sample_data(ps)$Non.Human.Reads < 0)] <- -1 *sample_data(ps)$Non.Human.Reads[which(sample_data(ps)$Non.Human.Reads < 0)]
summary(sample_data(subset_samples(ps, Sample_Type == "Plasma"))$Non.Human.Reads)/(2*10^4)
summary(sample_data(subset_samples(ps, Sample_Type == "Control"))$Non.Human.Reads)/(2*10^6)
ps.top <- ps
# do arcsinh transformation
ot <- otu_table(ps.top) %>% data.frame %>% as.matrix
geo_mean <- function(x) {
if(all(x == 0)){
val <- 0
}else{
val <- exp(sum(log(x[x > 0]))/length(x))
}
return(val)
}
geom_mean_row <- apply(ot, 1, FUN = geo_mean)
sj <- estimateSizeFactorsForMatrix(ot, median, geoMeans = geom_mean_row)
ot.trans <- t(asinh(t(ot)/sj))
ps.top <- phyloseq(otu_table(ot.trans, taxa_are_rows = TRUE), sample_data(ps.top), tax_table(ps.top))
# choose top 30 species in plasma samples for heatmap
top <- names(sort(taxa_sums(subset_samples(ps.top, Sample_Type == "Plasma")), decreasing=TRUE))[1:30]
ps.top <- prune_taxa(top, ps.top)
otu_table(ps.top) <- otu_table(ps.top) +1
# order sample by plasma and control
df <- data.frame(sample_data(ps)$SampleCode, sample_data(ps)$Sample_Type)
df <- df[order(df$sample_data.ps..Sample_Type),]
sam.order <- as.character(df$sample_data.ps..SampleCode)
p <- plot_heatmap(ps.top, sample.label = "SampleCode", taxa.label="Species", taxa.order = top, sample.order = sam.order) +
guides(fill = guide_legend(title="asinh abundance")) +
facet_wrap(~block, scales = "free_x") +
theme(strip.background = element_blank(), axis.text = element_text(size = 10), strip.text = element_text(size = 10)) +
xlab("Sample Code")
p
ggsave("./Figures/heatmap_hf_top.eps", plot = p, width = 20, height = 10)
ps <- prune_taxa(taxa_sums(ps) > 0, ps)
ps_plasma <- subset_samples(ps,Sample_Type %in% c("Plasma"))
prevTaxaP <- apply(otu_table(ps_plasma), 1 ,function(x){sum(x>0)})
Contaminants1 <- names(prevTaxaP)[prevTaxaP == 0]
ps <- prune_taxa(prevTaxaP > 0, ps)
totalReads <- colSums(otu_table(subset_samples(ps, Sample_Type == "Plasma")))
hist(log(totalReads),yaxs="i",xaxs="i",main="Distribution of total reads per sample", breaks=50)
totalReads <- colSums(otu_table(subset_samples(ps, Sample_Type == "Control")))
hist(log(totalReads),yaxs="i",xaxs="i",main="Distribution of total reads per sample", breaks=50)
table(sample_data(ps)$Sample_Type, sample_data(ps)$block)
psBlockResult <- psBlockResults(ps, sampleTypeVar = "Sample_Type", caselevels = c("Plasma"), controllevel= "Control", sampleName = "SampleCode", blockVar = "block")
psByBlock <- psBlockResult[[1]]
psNCbyBlock <- psBlockResult[[2]]
psallzeroInNC <- psBlockResult[[3]]
psPlByBlock <- psBlockResult[[4]]
saveRDS(psByBlock,"./Results/psByBlock.rds")
alphaBetaNegControl <- alphaBetaNegControl(psNCbyBlock = psNCbyBlock, stringent = FALSE)
saveRDS(alphaBetaNegControl, "./Results/alphaBetaNegControl.rds")
num_blks <- length(alphaBetaNegControl)
blks <- seq(1, num_blks) %>% as.list
gammaPrior_all_blks <- lapply(blks, function(x){
gammaPrior <- alphaBetaContInPlasma(psPlByBlock = psPlByBlock, psallzeroInNC = psallzeroInNC, blk = x, alphaBetaNegControl = alphaBetaNegControl)
return(gammaPrior)
})
proc.time()-t1
saveRDS(gammaPrior_all_blks, "./Results/gammaPrior_all_blks.rds")
library(tidyr)
itera <- 100
burnIn <- 6
cov_pro <- .95
mak_tab <- TRUE # need to change to TRUE if you want to make tables
gammaPrior_posTrueSing_all_blocks <- readRDS("./Results/gammaPrior_posTrueSing_all_blocks_SIRS.rds")
gammaPrior_posTrueSing_all_blocks <- readRDS("./Results/gammaPrior_posTrueSing_all_blocks_hf.rds")
gammaPrior_all_blks <- gammaPrior_posTrueSing_all_blocks[[1]]
post_all_blocks <- gammaPrior_posTrueSing_all_blocks[[2]]
blk <- 1
taxa_post_all_sam <- post_all_blocks[[blk]]
gammPrior <- gammaPrior_all_blks[[blk]]
sample.names <- sample_names(psPlByBlock[[blk]])
j=1
j=13
desired.sample.name <- sample.names[j]
desired.sample.index <- which(sample_names(psPlByBlock[[blk]]) %in% desired.sample.name)
tax_interested <- rownames(sort(otu_table(psPlByBlock[[blk]])[,desired.sample.index],decreasing = TRUE))[c(1:20)]
tax_interested_ind <- which(as.character(taxa_names(psPlByBlock[[blk]])) %in% tax_interested)
tax_names <- taxa_names(psPlByBlock[[blk]])[tax_interested_ind]
taxa.post <- taxa_post_all_sam[[desired.sample.index]]
burnIn <- 6
signal.hist <- taxa.post[tax_interested_ind]
signal.hist <- lapply(signal.hist,function(x){x[-(1:burnIn),]})
signal.df <- data.frame(do.call("cbind", signal.hist))
colnames(signal.df) <- tax_names
signal.df$group <- rep("True",length=dim(signal.df)[1])
bg <- list()
for(ind in 1:length(tax_interested_ind)){
bg[[ind]] <- rgamma(100, shape=gammPrior[[desired.sample.index]][[1]][tax_interested_ind[ind]],rate = gammPrior[[desired.sample.index]][[2]][tax_interested_ind[ind]])
}
bg.df <- data.frame(do.call("cbind",bg))
colnames(bg.df) <- tax_names
bg.df$group <- rep("Contaminant",length=dim(bg.df)[1])
bg.signal <- rbind(signal.df, bg.df)
bg.signal$group <- as.factor(bg.signal$group)
bg_sig_long <- tidyr::gather(bg.signal,key="Taxa",value="Reads",1:(dim(bg.signal)[2]-1))
bg_sig_long$Taxa <- as.factor(bg_sig_long$Taxa)
p <- ggplot(bg_sig_long, aes(x= Reads))+
geom_density(aes(y = ..scaled.., fill = group, color = group))+
facet_wrap(~Taxa,scales = "free")+
scale_fill_manual(values=c("blue","brown"))+
scale_color_manual(values=c("blue","brown"))+
ggtitle(desired.sample.name)+
theme(plot.title = element_text(hjust = 0.5), legend.title=element_blank(), strip.text.x = element_text(size=5),strip.background = element_blank(), panel.grid = element_blank()) + xlab("") + ylab("density")
p
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
#library(BARBI)
library(devtools)
library(phyloseq)
library(DESeq2)
library(dplyr)
library(tidyr)
library(R.utils)
library(BiocParallel)
library(doParallel)
library(parallel)
library(HDInterval)
library(grid)
library(xtable)
library(gtable)
library(gridExtra)
library(BiocStyle)
library(magrittr)
library(ggplot2)
sourceDirectory("./R")
#sourceDirectory("/Users/jpratheepa31/Dropbox/GitHub/BARBI/R")
t1 <- proc.time()
ncores <- as.integer(Sys.getenv("SLURM_NTASKS"))
if(is.na(ncores)) ncores <- parallel::detectCores()
ncores
ps <- readRDS("./Data/pshf.rds")
ps
if(dim(otu_table(ps))[1]!=ntaxa(ps)){otu_table(ps) <- t(otu_table(ps))}
set1 <- c("FL002","FL003","FL004","FL005")
set2 <- c("FL006","FL007","FL008","FL009","FL010","FL011")
#       the following negative controls are in set 2 only.
nctrl <- c("Water.Keck.1","Phix.1","Phix.2","Water.ctrl.1","Water.ctrl.2")
ext.num <- sample_data(ps)$SubjectName
blocks <-ifelse(ext.num %in% set1, "Set1", "Set2")
sample_data(ps)$block <- blocks
ps <- subset_samples(ps,Sample_Type %in% c("Plasma", "Control"))
sample_data(ps)$Reads <- as.numeric(gsub(",","",sample_data(ps)$Reads))
summary(sample_data(subset_samples(ps, Sample_Type == "Plasma"))$Reads)/(2*10^6)
summary(sample_data(subset_samples(ps, Sample_Type == "Control"))$Reads)/(2*10^6)
sample_data(ps)$Non.Human.Reads[which(sample_data(ps)$Non.Human.Reads < 0)] <- -1 *sample_data(ps)$Non.Human.Reads[which(sample_data(ps)$Non.Human.Reads < 0)]
summary(sample_data(subset_samples(ps, Sample_Type == "Plasma"))$Non.Human.Reads)/(2*10^4)
summary(sample_data(subset_samples(ps, Sample_Type == "Control"))$Non.Human.Reads)/(2*10^6)
ps.top <- ps
# do arcsinh transformation
ot <- otu_table(ps.top) %>% data.frame %>% as.matrix
geo_mean <- function(x) {
if(all(x == 0)){
val <- 0
}else{
val <- exp(sum(log(x[x > 0]))/length(x))
}
return(val)
}
geom_mean_row <- apply(ot, 1, FUN = geo_mean)
sj <- estimateSizeFactorsForMatrix(ot, median, geoMeans = geom_mean_row)
ot.trans <- t(asinh(t(ot)/sj))
ps.top <- phyloseq(otu_table(ot.trans, taxa_are_rows = TRUE), sample_data(ps.top), tax_table(ps.top))
# choose top 30 species in plasma samples for heatmap
top <- names(sort(taxa_sums(subset_samples(ps.top, Sample_Type == "Plasma")), decreasing=TRUE))[1:30]
ps.top <- prune_taxa(top, ps.top)
otu_table(ps.top) <- otu_table(ps.top) +1
# order sample by plasma and control
df <- data.frame(sample_data(ps)$SampleCode, sample_data(ps)$Sample_Type)
df <- df[order(df$sample_data.ps..Sample_Type),]
sam.order <- as.character(df$sample_data.ps..SampleCode)
p <- plot_heatmap(ps.top, sample.label = "SampleCode", taxa.label="Species", taxa.order = top, sample.order = sam.order) + geom_tile() +
guides(fill = guide_legend(title="asinh abundance")) +
facet_wrap(~block, scales = "free_x") +
theme(strip.background = element_blank(), axis.text = element_text(size = 10), strip.text = element_text(size = 10)) +
xlab("Sample Code")
p
ggsave("./Figures/heatmap_hf_top.eps", plot = p, width = 20, height = 10)
plot_heatmap(ps.top, sample.label = "SampleCode", taxa.label="Species", taxa.order = top, sample.order = sam.order) + geom_tile()
ggsave("./Figures/heatmap_hf_top.eps", plot = p, width = 20, height = 10)
ggsave("./Figures/heatmap_hf_top.eps", plot = p, width = 18, height = 10)
ggsave("./Figures/heatmap_hf_top.eps", plot = p, width = 15, height = 10)
rm(list = ls())
library(DESeq2)
library(phyloseq)
library(dplyr)
library(tidyr)
library(ggplot2)
ps <- readRDS("./Data/pshf.rds")
set1 <- c("FL002","FL003","FL004","FL005")
set2 <- c("FL006","FL007","FL008","FL009","FL010","FL011")
#       the following negative controls are in set 2 only.
nctrl <- c("Water.Keck.1","Phix.1","Phix.2","Water.ctrl.1","Water.ctrl.2")
ext.num <- sample_data(ps)$SubjectName
blocks <-ifelse(ext.num %in% set1, "Set1", "Set2")
sample_data(ps)$block <- blocks
if (dim(otu_table(ps))[1] != ntaxa(ps)){otu_table(ps) <- t(otu_table(ps))}
#   total reads per sample
totalReads <- colSums(otu_table(ps))
#   distribution of total reads per sample
hist(log(totalReads),yaxs = "i",xaxs = "i",main = "Distribution of total reads per sample",breaks = 50)
#   select plasma samples and negative controls
ps <- subset_samples(ps,Sample_Type %in% c("Plasma","Control"))
ps <- prune_taxa(taxa_sums(ps) > 0, ps)
ps_plasma <- subset_samples(ps,Sample_Type %in% c("Plasma"))
prevTaxaP <- apply(otu_table(ps_plasma), 1 ,function(x){sum(x>0)})
Contaminants1 <- names(prevTaxaP)[prevTaxaP==0]
ps <- prune_taxa(prevTaxaP > 0,ps)
psR <- transform_sample_counts(ps, function(x){
x <- rank(x)
x <- x-1000
x[x<1] <- 1
return(x)
})
library(ade4)
abund_ranks <- otu_table(psR) %>% t %>% data.frame
ranks_pca <- dudi.pca(abund_ranks, scannf = F, nf = 3)
row_scores <- data.frame(li = ranks_pca$li,
SampleCode = rownames(abund_ranks))
#row_scores$SampleID <- as.character(row_scores$SampleID)
#samdf <- sample_data(psR) %>% data.frame
#samdf$SampleID <- as.character(samdf$SampleID)
row_scores <- row_scores %>%
left_join(sample_data(psR))
row_scores$block <- factor(row_scores$block)
evals_prop <- 100 * (ranks_pca$eig / sum(ranks_pca$eig))
evals <- ranks_pca$eig
p <- ggplot() +
geom_point(data = row_scores, aes(x = li.Axis1, y = li.Axis2, shape = Sample_Type, color = block), size = 3)  +
guides(col = guide_legend(override.aes = list(size = 3))) +
labs(x = sprintf("Axis1 [%s%% variance]", round(evals_prop[1], 2)),
y = sprintf("Axis2 [%s%% variance]", round(evals_prop[2], 2))) +
ggtitle("")+
theme_bw() +
theme(panel.border = element_rect(color = "#787878", fill = alpha("white", 0)), plot.title = element_text(hjust = .5), legend.title=element_text(size = 8), legend.text=element_text(size=8), axis.text = element_text(size = 1),  axis.title = element_text(size = 10))
+ guides(shape = guide_legend(title="Sample Type"),color = guide_legend(title = "Block"))
library(ade4)
abund_ranks <- otu_table(psR) %>% t %>% data.frame
ranks_pca <- dudi.pca(abund_ranks, scannf = F, nf = 3)
row_scores <- data.frame(li = ranks_pca$li,
SampleCode = rownames(abund_ranks))
#row_scores$SampleID <- as.character(row_scores$SampleID)
#samdf <- sample_data(psR) %>% data.frame
#samdf$SampleID <- as.character(samdf$SampleID)
row_scores <- row_scores %>%
left_join(sample_data(psR))
row_scores$block <- factor(row_scores$block)
evals_prop <- 100 * (ranks_pca$eig / sum(ranks_pca$eig))
evals <- ranks_pca$eig
p <- ggplot() +
geom_point(data = row_scores, aes(x = li.Axis1, y = li.Axis2, shape = Sample_Type, color = block), size = 3)  +
guides(col = guide_legend(override.aes = list(size = 3))) +
labs(x = sprintf("Axis 1 [%s%% variance]", round(evals_prop[1], 1)),
y = sprintf("Axis 2 [%s%% variance]", round(evals_prop[2], 1))) +
ggtitle("")+
theme_bw() +
theme(panel.border = element_rect(color = "#787878", fill = alpha("white", 0)), plot.title = element_text(hjust = .5), legend.title=element_text(size = 8), legend.text=element_text(size=8), axis.text = element_text(size = 1),  axis.title = element_text(size = 10)) + guides(shape = guide_legend(title="Sample Type"),color = guide_legend(title = "Block"))
# coord_fixed(sqrt(ranks_pca$eig[2] / ranks_pca$eig[1])) +
p
p
ggsave("./Figures/PCA_flossing.eps", plot=p, width = 6, height = 4)
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
#library(BARBI)
library(devtools)
library(phyloseq)
library(DESeq2)
library(dplyr)
library(tidyr)
library(R.utils)
library(BiocParallel)
library(doParallel)
library(parallel)
library(HDInterval)
library(grid)
library(xtable)
library(gtable)
library(gridExtra)
library(BiocStyle)
library(magrittr)
library(ggplot2)
sourceDirectory("./R")
#sourceDirectory("/Users/jpratheepa31/Dropbox/GitHub/BARBI/R")
t1 <- proc.time()
ncores <- as.integer(Sys.getenv("SLURM_NTASKS"))
if(is.na(ncores)) ncores <- parallel::detectCores()
ncores
ps <- readRDS("./Data/pshf.rds")
ps
if(dim(otu_table(ps))[1]!=ntaxa(ps)){otu_table(ps) <- t(otu_table(ps))}
set1 <- c("FL002","FL003","FL004","FL005")
set2 <- c("FL006","FL007","FL008","FL009","FL010","FL011")
#       the following negative controls are in set 2 only.
nctrl <- c("Water.Keck.1","Phix.1","Phix.2","Water.ctrl.1","Water.ctrl.2")
ext.num <- sample_data(ps)$SubjectName
blocks <-ifelse(ext.num %in% set1, "Set1", "Set2")
sample_data(ps)$block <- blocks
ps <- subset_samples(ps,Sample_Type %in% c("Plasma", "Control"))
sample_data(ps)$Reads <- as.numeric(gsub(",","",sample_data(ps)$Reads))
summary(sample_data(subset_samples(ps, Sample_Type == "Plasma"))$Reads)/(2*10^6)
summary(sample_data(subset_samples(ps, Sample_Type == "Control"))$Reads)/(2*10^6)
sample_data(ps)$Non.Human.Reads[which(sample_data(ps)$Non.Human.Reads < 0)] <- -1 *sample_data(ps)$Non.Human.Reads[which(sample_data(ps)$Non.Human.Reads < 0)]
summary(sample_data(subset_samples(ps, Sample_Type == "Plasma"))$Non.Human.Reads)/(2*10^4)
summary(sample_data(subset_samples(ps, Sample_Type == "Control"))$Non.Human.Reads)/(2*10^6)
ps.top <- ps
# do arcsinh transformation
ot <- otu_table(ps.top) %>% data.frame %>% as.matrix
geo_mean <- function(x) {
if(all(x == 0)){
val <- 0
}else{
val <- exp(sum(log(x[x > 0]))/length(x))
}
return(val)
}
geom_mean_row <- apply(ot, 1, FUN = geo_mean)
sj <- estimateSizeFactorsForMatrix(ot, median, geoMeans = geom_mean_row)
ot.trans <- t(asinh(t(ot)/sj))
ps.top <- phyloseq(otu_table(ot.trans, taxa_are_rows = TRUE), sample_data(ps.top), tax_table(ps.top))
# choose top 30 species in plasma samples for heatmap
top <- names(sort(taxa_sums(subset_samples(ps.top, Sample_Type == "Plasma")), decreasing=TRUE))[1:30]
ps.top <- prune_taxa(top, ps.top)
otu_table(ps.top) <- otu_table(ps.top) +1
# order sample by plasma and control
df <- data.frame(sample_data(ps)$SampleCode, sample_data(ps)$Sample_Type)
df <- df[order(df$sample_data.ps..Sample_Type),]
sam.order <- as.character(df$sample_data.ps..SampleCode)
ps.top
plot_heatmap(ps.top, sample.label = "SampleCode", taxa.label="Species", taxa.order = top, sample.order = sam.order)
plot_heatmap(ps.top, sample.label = "SampleCode", taxa.label="Species", taxa.order = top, sample.order = sam.order)+ xlab("Sample Code")
plot_heatmap
p
p <- plot_heatmap(ps.top, sample.label = "SampleCode", taxa.label="Species", taxa.order = top, sample.order = sam.order) + geom_tile() +
guides(fill = guide_legend(title="asinh abundance")) +
facet_wrap(~block, scales = "free_x") +
theme(strip.background = element_blank(), axis.text = element_text(size = 10), strip.text = element_text(size = 10)) +
xlab("Sample Code")
p
p$labels
p <- plot_heatmap(ps.top, sample.label = "SampleCode", taxa.label="Species", taxa.order = top, sample.order = sam.order) + geom_tile() +
guides(fill = guide_legend(title="asinh abundance")) +
facet_wrap(~block, scales = "free_x") +
theme(strip.background = element_blank(), axis.text = element_text(size = 10), strip.text = element_text(size = 10))
p$facet
p$labels
p$guides
p$layers
p$mapping
p$facet
p <- plot_heatmap(ps.top, sample.label = "SampleCode", taxa.label="Species", taxa.order = top, sample.order = sam.order) + geom_tile() +
guides(fill = guide_legend(title="asinh abundance")) +
facet_wrap(~block, scales = "free_x") +
theme(strip.background = element_blank(), axis.text = element_text(size = 10), strip.text = element_text(size = 10)) +
xlab("Sample Code")
p <- plot_heatmap(ps.top, sample.label = "SampleCode", taxa.label="Species", taxa.order = top, sample.order = sam.order) + geom_tile() +
guides(fill = guide_legend(title="asinh abundance")) +
facet_wrap(~block, scales = "free_x") +
theme(strip.background = element_blank(), axis.text = element_text(size = 10), strip.text = element_text(size = 10)) +
xlab("Sample Code")
p
p <- plot_heatmap(ps.top, sample.label = "SampleCode", taxa.label="Species", taxa.order = top, sample.order = sam.order) + geom_tile() +
guides(fill = guide_legend(title="asinh abundance")) +
facet_wrap(~block, scales = "free_x") +
theme(strip.background = element_blank(), axis.text = element_text(size = 10), strip.text = element_text(size = 10)) +
xlab("Sample Code")
p <- plot_heatmap(ps.top, sample.label = "SampleCode", taxa.label="Species", taxa.order = top, sample.order = sam.order) + geom_tile() +
guides(fill = guide_legend(title="asinh abundance")) +
facet_wrap(~block, scales = "free_x") +
theme(strip.background = element_blank(), axis.text = element_text(size = 10), strip.text = element_text(size = 10)) +
xlab("Sample Code")
p
p+ ylab("Spe")
class(sample_data(ps.top)$SampleCode)
class(sample_data(ps.top)$block)
sample_data(ps.top)$block <- factor(sample_data(ps.top)$block)
levels(sample_data(ps.top)$block)
levels(sample_data(ps.top)$block <- c("Set 1", "Set 2")
levels(sample_data(ps.top)$block) <- c("Set 1", "Set 2")
p <- plot_heatmap(ps.top, sample.label = "SampleCode", taxa.label="Species", taxa.order = top, sample.order = sam.order) + geom_tile() +
guides(fill = guide_legend(title="asinh abundance")) +
facet_wrap(~block, scales = "free_x") +
theme(strip.background = element_blank(), axis.text = element_text(size = 10), strip.text = element_text(size = 10)) +
xlab("Sample Code")
levels(sample_data(ps.top)$block) <- c("Set 1", "Set 2")
p <- plot_heatmap(ps.top, sample.label = "SampleCode", taxa.label="Species", taxa.order = top, sample.order = sam.order) + geom_tile() +
guides(fill = guide_legend(title="asinh abundance")) +
facet_wrap(~block, scales = "free_x") +
theme(strip.background = element_blank(), axis.text = element_text(size = 10), strip.text = element_text(size = 10)) +
xlab("Sample Code")
p
p+xlab("Sample Code")
p$layers
p$plot_env
p$guides
p + ggtitle("Heatmap")
plot_heatmap(ps.top, sample.label = "SampleCode", taxa.label="Species", taxa.order = top, sample.order = sam.order) + xlab("GGG")
plot_heatmap(ps.top, sample.label = "SampleCode")
plot_heatmap(ps.top, sample.label = "SampleCode")+xlab
plot_heatmap(ps.top, sample.label = "SampleCode")+xlab("GGG")
plot_heatmap(ps.top, sample.label = SampleCode, taxa.label="Species", taxa.order = top, sample.order = sam.order)
plot_heatmap(ps.top, sample.label = "SampleCode", taxa.label="Species", taxa.order = top, sample.order = sam.order)
sam.order
ps.top <- ps
# do arcsinh transformation
ot <- otu_table(ps.top) %>% data.frame %>% as.matrix
geo_mean <- function(x) {
if(all(x == 0)){
val <- 0
}else{
val <- exp(sum(log(x[x > 0]))/length(x))
}
return(val)
}
geom_mean_row <- apply(ot, 1, FUN = geo_mean)
sj <- estimateSizeFactorsForMatrix(ot, median, geoMeans = geom_mean_row)
ot.trans <- t(asinh(t(ot)/sj))
ps.top <- phyloseq(otu_table(ot.trans, taxa_are_rows = TRUE), sample_data(ps.top), tax_table(ps.top))
# choose top 30 species in plasma samples for heatmap
top <- names(sort(taxa_sums(subset_samples(ps.top, Sample_Type == "Plasma")), decreasing=TRUE))[1:30]
ps.top <- prune_taxa(top, ps.top)
otu_table(ps.top) <- otu_table(ps.top) +1
# order sample by plasma and control
df <- data.frame(sample_data(ps)$SampleCode, sample_data(ps)$Sample_Type)
df <- df[order(df$sample_data.ps..Sample_Type),]
sam.order <- as.character(df$sample_data.ps..SampleCode)
sample_data(ps.top)$block <- factor(sample_data(ps.top)$block)
levels(sample_data(ps.top)$block) <- c("Set 1", "Set 2")
p <- plot_heatmap(ps.top, sample.label = "SampleCode", taxa.label="Species", taxa.order = top, sample.order = sam.order) + geom_tile() +
guides(fill = guide_legend(title="asinh abundance")) +
facet_wrap(~block, scales = "free_x") +
theme(strip.background = element_blank(), axis.text = element_text(size = 10), strip.text = element_text(size = 10)) +
xlab("Sample Code")
p
ggsave("./Figures/heatmap_hf_top.eps", plot = p, width = 10, height = 8)
ggsave("./Figures/heatmap_hf_top.eps", plot = p, width = 10, height = 8)
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
#library(BARBI)
library(devtools)
library(phyloseq)
library(DESeq2)
library(dplyr)
library(tidyr)
library(R.utils)
library(BiocParallel)
library(doParallel)
library(parallel)
library(HDInterval)
library(grid)
library(xtable)
library(gtable)
library(gridExtra)
library(BiocStyle)
library(magrittr)
library(ggplot2)
sourceDirectory("./R")
#sourceDirectory("/Users/jpratheepa31/Dropbox/GitHub/BARBI/R")
t1 <- proc.time()
ncores <- as.integer(Sys.getenv("SLURM_NTASKS"))
if(is.na(ncores)) ncores <- parallel::detectCores()
ncores
ps <- readRDS("./Data/pshf.rds")
ps
if(dim(otu_table(ps))[1]!=ntaxa(ps)){otu_table(ps) <- t(otu_table(ps))}
set1 <- c("FL002","FL003","FL004","FL005")
set2 <- c("FL006","FL007","FL008","FL009","FL010","FL011")
#       the following negative controls are in set 2 only.
nctrl <- c("Water.Keck.1","Phix.1","Phix.2","Water.ctrl.1","Water.ctrl.2")
ext.num <- sample_data(ps)$SubjectName
blocks <-ifelse(ext.num %in% set1, "Set1", "Set2")
sample_data(ps)$block <- blocks
ps <- subset_samples(ps,Sample_Type %in% c("Plasma", "Control"))
sample_data(ps)$Reads <- as.numeric(gsub(",","",sample_data(ps)$Reads))
summary(sample_data(subset_samples(ps, Sample_Type == "Plasma"))$Reads)/(2*10^6)
summary(sample_data(subset_samples(ps, Sample_Type == "Control"))$Reads)/(2*10^6)
sample_data(ps)$Non.Human.Reads[which(sample_data(ps)$Non.Human.Reads < 0)] <- -1 *sample_data(ps)$Non.Human.Reads[which(sample_data(ps)$Non.Human.Reads < 0)]
summary(sample_data(subset_samples(ps, Sample_Type == "Plasma"))$Non.Human.Reads)/(2*10^4)
summary(sample_data(subset_samples(ps, Sample_Type == "Control"))$Non.Human.Reads)/(2*10^6)
ps.top <- ps
# do arcsinh transformation
ot <- otu_table(ps.top) %>% data.frame %>% as.matrix
geo_mean <- function(x) {
if(all(x == 0)){
val <- 0
}else{
val <- exp(sum(log(x[x > 0]))/length(x))
}
return(val)
}
geom_mean_row <- apply(ot, 1, FUN = geo_mean)
sj <- estimateSizeFactorsForMatrix(ot, median, geoMeans = geom_mean_row)
ot.trans <- t(asinh(t(ot)/sj))
ps.top <- phyloseq(otu_table(ot.trans, taxa_are_rows = TRUE), sample_data(ps.top), tax_table(ps.top))
# choose top 30 species in plasma samples for heatmap
top <- names(sort(taxa_sums(subset_samples(ps.top, Sample_Type == "Plasma")), decreasing=TRUE))[1:30]
ps.top <- prune_taxa(top, ps.top)
otu_table(ps.top) <- otu_table(ps.top) +1
# order sample by plasma and control
df <- data.frame(sample_data(ps)$SampleCode, sample_data(ps)$Sample_Type)
df <- df[order(df$sample_data.ps..Sample_Type),]
sam.order <- as.character(df$sample_data.ps..SampleCode)
sample_data(ps.top)$block <- factor(sample_data(ps.top)$block)
levels(sample_data(ps.top)$block) <- c("Set 1", "Set 2")
p <- plot_heatmap(ps.top, sample.label = "SampleCode", taxa.label="Species", taxa.order = top, sample.order = sam.order) + geom_tile() +
guides(fill = guide_legend(title="asinh abundance")) +
facet_grid(~block+Sample_Type, scales = "free_x") +
theme(strip.background = element_blank(), axis.text = element_text(size = 10), strip.text = element_text(size = 10)) +
xlab("Sample Code")
p <- p+ theme(axis.text.x=element_blank(), axis.ticks.x=element_blank())
p
ggsave("./Figures/heatmap_hf_top.eps", plot = p, width = 10, height = 8)
